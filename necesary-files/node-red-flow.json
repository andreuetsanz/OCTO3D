[
    {
        "id": "a2a9e5be90c88c9b",
        "type": "tab",
        "label": "Get_Data_From_Octoprint",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bb019bfa44e6901f",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "GET OCTOPRINT DATA",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "7fad767123a6310a",
            "435ce7582960f86c",
            "ea1ad8475495e91a",
            "600848a8cdc041cf",
            "3edee83105fa0583",
            "61032e730c54cd27",
            "0523c486a8999748",
            "023d1077f9246d1c",
            "298b211fb0cff012",
            "048d8c6e4388404e",
            "bc9dcbfa9b5b16a1",
            "cda601e3b6347d33",
            "b3edce48a31ebcd7",
            "d12e148c62fd73a6",
            "e4bbc43e70d37f52",
            "be8624ea08f56d84",
            "18869d8e74c2efb2",
            "a18ff98957f5f8cb",
            "8d209dce022e6a8f",
            "99d98726189d55ea",
            "cd1738652d91ca19",
            "e901e0e508ebd2b5",
            "f2a844442914b379",
            "4d6da19156908550",
            "d349d044f269d444",
            "017b42138de74173",
            "a4b0c39a0b34da2b",
            "b8c8c2081b79cb32",
            "e9722718764c1529",
            "61ef404e32693d7e",
            "e1e5fada5a178ba7",
            "74246b3d77586a30",
            "3760a31eb18b29d6",
            "48a274ad23d53b99",
            "3651b259673299c1",
            "50a6f9f4c79b58db",
            "e68648e2816767db",
            "26f6348e04fac4ce",
            "38caa094dcf95a9d",
            "380b2a890e90e856",
            "9a9b6ef01e3e9ff2",
            "817e27ec55360541",
            "bd6fe537b8f51845",
            "5c34b2f1e50c3421",
            "05ad82d678d43788"
        ],
        "x": 33,
        "y": 679,
        "w": 1653,
        "h": 782
    },
    {
        "id": "bafa87dcca950c39",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "Kafka",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true
        },
        "nodes": [
            "870ebd7330d35e55",
            "de0e6e22046ace97",
            "df14d52508aea061",
            "bbb7c4d9870e96c8"
        ],
        "x": 34,
        "y": 1479,
        "w": 552,
        "h": 122
    },
    {
        "id": "f0022ec11f6d06c9",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "USER ID",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "4a983eed42dbb941",
            "4cb8bd07c1cf5a25",
            "da70627a2bd39c82",
            "9202e8563b98d90a",
            "7334d7ea031d1f84",
            "26f18663d43ead00",
            "6727ab8576f4ab8e",
            "9d2ee16cd339a92d",
            "d72c070cb182e9b0"
        ],
        "x": 34,
        "y": 139,
        "w": 1292,
        "h": 122
    },
    {
        "id": "4422e37b61e3151f",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "Panel 3D Printer",
        "style": {
            "stroke": "#00bcd4",
            "fill": "#e0f7fa",
            "label": true
        },
        "nodes": [
            "7fa2acbb842d3f20",
            "c86e205f6efb5a4f",
            "b14e89452c265e29",
            "81d0ebae3a39c876",
            "458d64306dc7a946",
            "21d0a4547ac18d10"
        ],
        "x": 34,
        "y": 1619,
        "w": 632,
        "h": 122
    },
    {
        "id": "28d2722965910b68",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "IS PRINTING?",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "115e2776495b61df",
            "c0d20859624fec7c",
            "003b5c9417b86052",
            "87404189561b8b63",
            "b79d824ddf761ac3",
            "2f80d0c78e3b5948",
            "063d8c1085577384",
            "fd664f984a9cb409",
            "c52823c2648ac6b9",
            "e28bc44079c294e3",
            "e3fc1d2b3c4cf980",
            "b21761e1d4ef89d6",
            "aed6b54bee536e90",
            "05a30f8e2bbc56f7",
            "5e4b2f807833f688",
            "fcc79aa85847db8e",
            "0452b54d74a040ef",
            "f00d064bd27cf6f5"
        ],
        "x": 34,
        "y": 279,
        "w": 1032,
        "h": 382
    },
    {
        "id": "66873d681da67a9e",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "name": "ORION",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true
        },
        "nodes": [
            "d87a84c928c9da8b",
            "b2e5b7039d684c81",
            "63649160388b7d52",
            "7904c491ee17a22f",
            "edb5b5bf9e74af16"
        ],
        "x": 24,
        "y": 1753,
        "w": 1608,
        "h": 514
    },
    {
        "id": "d87a84c928c9da8b",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "g": "66873d681da67a9e",
        "name": "Endpoint",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "label-position": "n",
            "color": "#ffffff"
        },
        "nodes": [
            "33456c2b63b234f6",
            "d89ca2751ac56b24",
            "df62a9932f8acd75",
            "3fd8a46a266d1ee8"
        ],
        "x": 54,
        "y": 2079,
        "w": 512,
        "h": 162
    },
    {
        "id": "edb5b5bf9e74af16",
        "type": "group",
        "z": "a2a9e5be90c88c9b",
        "g": "66873d681da67a9e",
        "name": "Preparar entorno Orion",
        "style": {
            "label": true
        },
        "nodes": [
            "f1d40dcef0aaefd6",
            "4edb16a71e5d7628",
            "ad5801c72a25da7a",
            "deaa5a6d1045185f",
            "21cc8df8d244183d",
            "9bec7c28040fe559",
            "4c105848ce8fe9e0",
            "e994810b1f604ae3",
            "a542d63cb2758eaa",
            "faa48cef8ae65465",
            "d8afaa31a78681da"
        ],
        "x": 54,
        "y": 1779,
        "w": 1552,
        "h": 222
    },
    {
        "id": "0523c486a8999748",
        "type": "inject",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "GET",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "cda601e3b6347d33",
                "d349d044f269d444",
                "b8c8c2081b79cb32",
                "e9722718764c1529",
                "61ef404e32693d7e",
                "e1e5fada5a178ba7",
                "74246b3d77586a30"
            ]
        ]
    },
    {
        "id": "023d1077f9246d1c",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=printer",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printer",
                "tot": "str"
            }
        ],
        "x": 780,
        "y": 780,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "298b211fb0cff012",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=job",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "job",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 840,
        "wires": [
            [
                "048d8c6e4388404e",
                "18869d8e74c2efb2"
            ]
        ]
    },
    {
        "id": "048d8c6e4388404e",
        "type": "join",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Unir",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1070,
        "y": 900,
        "wires": [
            [
                "e4bbc43e70d37f52"
            ]
        ]
    },
    {
        "id": "bc9dcbfa9b5b16a1",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Resultado Final",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 960,
        "wires": []
    },
    {
        "id": "cda601e3b6347d33",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "ID",
        "func": "// Generar timestamp\nlet timestamp = Date.now();\nlet maxletas = 5;\n\n// Funci√≥n para generar 3 letras aleatorias\nfunction generateUUIDv4() {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n// Crear el ID\nconst id = global.get(\"generate_id\")(\"opr\");\nmsg.payload = id\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "b3edce48a31ebcd7"
            ]
        ]
    },
    {
        "id": "b3edce48a31ebcd7",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=id",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "id",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "d12e148c62fd73a6",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=files",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "files",
                "tot": "str"
            }
        ],
        "x": 784,
        "y": 898.9999389648438,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "e4bbc43e70d37f52",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Formato JSON Schema",
        "func": "const data = msg.payload || {};\nconst printer = data.printer || {};\nconst job = data.job || {};\nconst id = data.id || {};\nconst displayLayerProgress = data.displayLayerProgress || {};\nconst gcode = data.gcode || {};\nconst img = data.img || {};\nconst printSuccessful = data.printSuccessful;\nconst roomTemperature = data.roomTemperature || {};\n\nconst files = data.files?.files || [];\nconst currentFilePath = job.job?.file?.path;\n\nlet matchedFile = files.find(f => f.path === currentFilePath);\nlet estimatedTime = matchedFile?.gcodeAnalysis?.estimatedPrintTime ?? (job.progress?.printTime ?? 0) + (job.progress?.printTimeLeft ?? 0);\n\nmsg.payload = {\n    id: id,\n    user_id: global.get('user_id'),\n    print_id: flow.get('print_id'),\n    type: \"3DPrinter\",\n    timestamp: new Date().toISOString(),\n\n    temperatures: {\n        nozzle: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.target ?? null,\n                unitCode: \"CEL\"\n            }\n\n        },\n        bed: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.target ?? null,\n                unitCode: \"CEL\"\n            }\n        }\n    },\n\n    environment: {\n        roomTemperature: {\n        value: roomTemperature ?? null,\n        unitCode: \"CEL\"\n        }\n    },\n\n    fanSpeed:{\n        type: \"Property\",\n        value: displayLayerProgress.fanSpeed ?? null,\n        unitCode: \"P1\"\n    },\n\n    printTime: {\n        elapsed: {\n            type: \"Property\",\n            value: job.progress?.printTime ?? null,\n            unitCode: \"SEC\"\n        },\n        estimated: {\n            type: \"Property\",\n            value: estimatedTime,\n            unitCode: \"SEC\"\n        }\n    },\n\n    printer: {\n        type: \"Property\",\n        value: gcode.printer ?? null\n    },\n\n    filament: {\n        type: \"Property\",\n        value: {\n            type: gcode.filament ?? null,\n            brand: gcode.filament_brand ?? null,\n            used: gcode.filament_used ?? null,\n        }\n    },\n\n    slicer: {\n        type: \"Property\",\n        value: gcode.slicer ?? null\n    },\n\n    printSuccessful: {\n        type: \"Property\",\n        value: printSuccessful ?? null\n    },\n\n    status: {\n        type: \"Property\",\n        value: job.state ?? null\n    },\n\n    image: {\n        type: \"Property\",\n        value: img ?? null\n    },\n\n    file: {\n        type: \"Property\",\n        value: currentFilePath\n    },\n    progress:{\n        type: \"Property\",\n        value: isNaN(parseInt(displayLayerProgress.print.progress)) ? null : parseInt(displayLayerProgress.print.progress)\n    },\n    layer: {\n        currentLayer: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.current ?? null\n        },\n        totalLayers: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.total ?? null,\n        }\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "26f6348e04fac4ce",
                "bc9dcbfa9b5b16a1"
            ]
        ]
    },
    {
        "id": "be8624ea08f56d84",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=DisplayLayerProgress",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "displayLayerProgress",
                "tot": "str"
            }
        ],
        "x": 830,
        "y": 960,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "18869d8e74c2efb2",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Descargar G-code",
        "func": "const nombreArchivo = msg.payload.job.file.path;\nmsg.filename = nombreArchivo;\nmsg.url = `${flow.get('OCTOPRINT_URL')}/downloads/files/local/${nombreArchivo}`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "a18ff98957f5f8cb"
            ]
        ]
    },
    {
        "id": "a18ff98957f5f8cb",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "8d209dce022e6a8f"
            ]
        ]
    },
    {
        "id": "8d209dce022e6a8f",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "99d98726189d55ea"
        ],
        "x": 1495,
        "y": 840,
        "wires": []
    },
    {
        "id": "99d98726189d55ea",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link in 1",
        "links": [
            "8d209dce022e6a8f"
        ],
        "x": 335,
        "y": 1020,
        "wires": [
            [
                "e901e0e508ebd2b5"
            ]
        ]
    },
    {
        "id": "cd1738652d91ca19",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=gcode",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gcode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1020,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "e901e0e508ebd2b5",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Parse G-code Info",
        "func": "let gcode = msg.payload;\n\nlet slicer = 'Desconocido';\nlet printer = '';\nlet filament = '';        // Tipo: PLA, PETG, etc.\nlet filamentBrand = '';   // Marca: eSun, Prusament, etc.\nlet filamentUsed = '';    // Usado: 5.23m, 15g, etc.\n\n// Lista de laminadores conocidos con variaciones de nombres\nconst slicers = {\n    'Ultimaker Cura': ['cura', 'ultimaker cura', 'cura_steamengine', 'cura-steamengine'],\n    'PrusaSlicer': ['prusaslicer', 'prusa slicer', 'prusaslicer'],\n    'Bambu Studio': ['bambu studio', 'bambu_studio', 'bambu-studio'],\n    'Creality Print': ['creality print', 'creality_print'],\n    'Slic3r': ['slic3r', 'slic3r pe', 'slic3r_pe'],\n    'IdeaMaker': ['ideamaker', 'idea_maker'],\n    'Simplify3D': ['simplify3d', 'simplify 3d'],\n    'MatterControl': ['mattercontrol', 'matter control'],\n    'ReplicatorG': ['replicatorg', 'replicator g'],\n    'FlashPrint': ['flashprint', 'flash print'],\n    'ZeroSlicer': ['zeroslicer', 'zero slicer'],\n    'Kiri Moto': ['kirimotors', 'kiri motors']\n};\n\n// Funci√≥n para verificar si alguna palabra del laminador aparece en el G-code\nfunction detectSlicer(gcode, slicerNames) {\n    for (let slicerName of slicerNames) {\n        let regex = new RegExp(slicerName, 'i');\n        if (regex.test(gcode)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Verificar slicer\nfor (let [name, variations] of Object.entries(slicers)) {\n    if (detectSlicer(gcode, variations)) {\n        slicer = name;\n        break;\n    }\n}\n\n// Detectar impresora con m√∫ltiples patrones comunes\nlet printerRegexes = [\n    /; ?(MACHINE_NAME|printer_model) *= *(.+)/i,\n    /; ?print_compatible_printers *= *(.+)/i,\n    /; ?printer_name *= *(.+)/i,\n    /; ?model *= *(.+)/i\n];\n\nfor (let regex of printerRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        printer = match?.[2]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar tipo de filamento (PLA, PETG, etc.)\nlet filamentTypeRegexes = [\n    /; ?filament_type *= *(.+)/i,\n    /; ?filament_material *= *(.+)/i\n];\n\nfor (let regex of filamentTypeRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filament = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar marca del filamento\nlet filamentBrandRegexes = [\n    /; ?filament_brand *= *(.+)/i,\n    /; ?filament_settings_id *= *(.+)/i\n];\n\n\nfor (let regex of filamentBrandRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filamentBrand = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar cantidad de filamento usado\n\n// 1. Buscar exactamente: \"; filament used [g] = ...\"\nlet usedGramsExact = gcode.match(/; ?filament used \\[g\\] *= *([^\\n]+)/i);\nif (usedGramsExact) {\n    filamentUsed = usedGramsExact[1].trim();\n} else {\n    // 2. Buscar una l√≠nea que contenga \"filament_user\" y tambi√©n una \"g\"\n    let userLineMatch = gcode.match(/^.*filament_user.*g.*$/gim);\n    if (userLineMatch && userLineMatch.length > 0) {\n        // Extraer solo el valor despu√©s del signo \"=\" si lo hay\n        let valueMatch = userLineMatch[0].match(/= *([^\\n]+)/);\n        if (valueMatch) {\n            filamentUsed = valueMatch[1].trim();\n        } else {\n            filamentUsed = userLineMatch[0].trim(); // L√≠nea completa como fallback\n        }\n    } else {\n        // 3. Buscar con los patrones comunes\n        let filamentUsedRegexes = [\n            /; ?filament used(?: *\\[.*\\])? *= *(.+)/i,\n            /; ?filament_used *= *(.+)/i,\n            /; ?filament_consumed *= *(.+)/i\n        ];\n\n        for (let regex of filamentUsedRegexes) {\n            let match = gcode.match(regex);\n            if (match) {\n                filamentUsed = match[1].trim();\n                break;\n            }\n        }\n    }\n}\n\n\n// Resultado\nmsg.payload = {\n    slicer: slicer,\n    printer: printer,\n    filament: filament,\n    filament_brand: filamentBrand,\n    filament_used: filamentUsed\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "cd1738652d91ca19"
            ]
        ]
    },
    {
        "id": "f2a844442914b379",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=img",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "img",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "4d6da19156908550",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=printSuccessful",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printSuccessful",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "d349d044f269d444",
        "type": "link call",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Obtener imaguen",
        "links": [
            "817e27ec55360541"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1080,
        "wires": [
            [
                "f2a844442914b379",
                "a4b0c39a0b34da2b"
            ]
        ]
    },
    {
        "id": "017b42138de74173",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set topic=roomTemperature",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "roomTemperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "048d8c6e4388404e"
            ]
        ]
    },
    {
        "id": "a4b0c39a0b34da2b",
        "type": "link call",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "IA",
        "links": [
            "7fad767123a6310a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "4d6da19156908550"
            ]
        ]
    },
    {
        "id": "b8c8c2081b79cb32",
        "type": "link call",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "roomTemperature",
        "links": [
            "ea1ad8475495e91a"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1200,
        "wires": [
            [
                "017b42138de74173"
            ]
        ]
    },
    {
        "id": "7fad767123a6310a",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link in 2",
        "links": [],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "3edee83105fa0583"
            ]
        ]
    },
    {
        "id": "435ce7582960f86c",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 275,
        "y": 1360,
        "wires": []
    },
    {
        "id": "ea1ad8475495e91a",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link in 3",
        "links": [],
        "x": 75,
        "y": 1420,
        "wires": [
            [
                "61032e730c54cd27"
            ]
        ]
    },
    {
        "id": "600848a8cdc041cf",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 355,
        "y": 1420,
        "wires": []
    },
    {
        "id": "3edee83105fa0583",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "IA",
        "func": "let ran = Math.random();\nif (ran < 0.80) {\n    msg.payload = true\n}else{\n    msg.payload = false\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "435ce7582960f86c",
                "05ad82d678d43788"
            ]
        ]
    },
    {
        "id": "61032e730c54cd27",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "roomTemperature",
        "func": "msg.payload = +(Math.random() + 30).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "600848a8cdc041cf"
            ]
        ]
    },
    {
        "id": "e9722718764c1529",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Estado OctoPrint",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/printer`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "3760a31eb18b29d6"
            ]
        ]
    },
    {
        "id": "61ef404e32693d7e",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Job Info",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/job`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 840,
        "wires": [
            [
                "48a274ad23d53b99"
            ]
        ]
    },
    {
        "id": "e1e5fada5a178ba7",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Files",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/files`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 900,
        "wires": [
            [
                "3651b259673299c1"
            ]
        ]
    },
    {
        "id": "74246b3d77586a30",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "DisplayLayerProgress",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/plugin/DisplayLayerProgress/values`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 960,
        "wires": [
            [
                "50a6f9f4c79b58db"
            ]
        ]
    },
    {
        "id": "3760a31eb18b29d6",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "023d1077f9246d1c"
            ]
        ]
    },
    {
        "id": "48a274ad23d53b99",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "298b211fb0cff012"
            ]
        ]
    },
    {
        "id": "3651b259673299c1",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "d12e148c62fd73a6"
            ]
        ]
    },
    {
        "id": "50a6f9f4c79b58db",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "be8624ea08f56d84"
            ]
        ]
    },
    {
        "id": "e68648e2816767db",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Pedir los datos",
        "links": [
            "f00d064bd27cf6f5"
        ],
        "x": 125,
        "y": 1140,
        "wires": [
            [
                "cda601e3b6347d33",
                "e9722718764c1529",
                "61ef404e32693d7e",
                "e1e5fada5a178ba7",
                "74246b3d77586a30",
                "d349d044f269d444",
                "b8c8c2081b79cb32"
            ]
        ]
    },
    {
        "id": "26f6348e04fac4ce",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "out-printer_data",
        "mode": "link",
        "links": [
            "de0e6e22046ace97",
            "7fa2acbb842d3f20",
            "7904c491ee17a22f"
        ],
        "x": 1495,
        "y": 900,
        "wires": []
    },
    {
        "id": "de0e6e22046ace97",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bafa87dcca950c39",
        "name": "lin-printer_data-kafka",
        "links": [
            "26f6348e04fac4ce"
        ],
        "x": 75,
        "y": 1540,
        "wires": [
            [
                "df14d52508aea061"
            ]
        ]
    },
    {
        "id": "df14d52508aea061",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bafa87dcca950c39",
        "name": "kafka Data",
        "func": "msg.payload = JSON.stringify(msg.payload);\nmsg.topic = \"octo-data\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1540,
        "wires": [
            [
                "870ebd7330d35e55",
                "bbb7c4d9870e96c8"
            ]
        ]
    },
    {
        "id": "870ebd7330d35e55",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "bafa87dcca950c39",
        "name": "Kafka Producer Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1520,
        "wires": []
    },
    {
        "id": "bbb7c4d9870e96c8",
        "type": "kafkajs-producer",
        "z": "a2a9e5be90c88c9b",
        "g": "bafa87dcca950c39",
        "name": "",
        "client": "89e380a1c824ddad",
        "topic": "",
        "advancedoptions": true,
        "acknowledge": "none",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "x": 420,
        "y": 1560,
        "wires": []
    },
    {
        "id": "4a983eed42dbb941",
        "type": "inject",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "User ID",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "4cb8bd07c1cf5a25"
            ]
        ]
    },
    {
        "id": "4cb8bd07c1cf5a25",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Set file path",
        "func": "msg.filename = \"id.txt\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 180,
        "wires": [
            [
                "da70627a2bd39c82"
            ]
        ]
    },
    {
        "id": "da70627a2bd39c82",
        "type": "file in",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Read ID file",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 180,
        "wires": [
            [
                "7334d7ea031d1f84"
            ]
        ]
    },
    {
        "id": "9202e8563b98d90a",
        "type": "file",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Write new ID",
        "filename": "id.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "26f18663d43ead00"
            ]
        ]
    },
    {
        "id": "7334d7ea031d1f84",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Check ID or generate",
        "func": "// Si hay ID v√°lido en el archivo\nif (msg.payload && msg.payload.trim() !== \"\") {\n    msg.id = msg.payload.trim();\n    return [msg, null]; // Salida 1: ID le√≠do\n} else {\n    const id = global.get(\"generate_id\")(\"uid\");\n    msg.id = id\n    msg.payload = id;\n    return [null, msg]; // Salida 2: nuevo ID\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 180,
        "wires": [
            [
                "26f18663d43ead00"
            ],
            [
                "9202e8563b98d90a"
            ]
        ]
    },
    {
        "id": "26f18663d43ead00",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Global ID",
        "func": "global.set('user_id', msg.payload)\nmsg.payload = global.get('user_id')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 180,
        "wires": [
            [
                "6727ab8576f4ab8e"
            ]
        ]
    },
    {
        "id": "6727ab8576f4ab8e",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "USER ID",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 180,
        "wires": []
    },
    {
        "id": "38caa094dcf95a9d",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Set filename",
        "func": "msg.filename = msg.payload.trim();\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 434,
        "y": 1293.0000610351562,
        "wires": [
            [
                "9a9b6ef01e3e9ff2"
            ]
        ]
    },
    {
        "id": "380b2a890e90e856",
        "type": "exec",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "command": "find /data/images -type f | shuf -n 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Buscar imagen aleatoria",
        "x": 229,
        "y": 1306.0000610351562,
        "wires": [
            [
                "38caa094dcf95a9d"
            ],
            [],
            []
        ]
    },
    {
        "id": "9a9b6ef01e3e9ff2",
        "type": "file in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Leer imagen",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "",
        "x": 634,
        "y": 1293.0000610351562,
        "wires": [
            [
                "bd6fe537b8f51845"
            ]
        ]
    },
    {
        "id": "817e27ec55360541",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link in 5",
        "links": [],
        "x": 74,
        "y": 1306.0000610351562,
        "wires": [
            [
                "380b2a890e90e856"
            ]
        ]
    },
    {
        "id": "bd6fe537b8f51845",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "A base64",
        "func": "msg.payload = msg.payload.toString('base64');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 824,
        "y": 1293.0000610351562,
        "wires": [
            [
                "5c34b2f1e50c3421"
            ]
        ]
    },
    {
        "id": "5c34b2f1e50c3421",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "link out 6",
        "mode": "return",
        "links": [],
        "x": 959,
        "y": 1293.0000610351562,
        "wires": []
    },
    {
        "id": "05ad82d678d43788",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "bb019bfa44e6901f",
        "name": "Resultado IA",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1360,
        "wires": []
    },
    {
        "id": "7fa2acbb842d3f20",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "name": "link-in-dashboard",
        "links": [
            "26f6348e04fac4ce"
        ],
        "x": 75,
        "y": 1660,
        "wires": [
            [
                "458d64306dc7a946"
            ]
        ]
    },
    {
        "id": "115e2776495b61df",
        "type": "mqtt in",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "PRINTING MQTT",
        "topic": "octoPrint/event/PrinterStateChanged",
        "qos": "0",
        "datatype": "auto",
        "broker": "4b50b82dd1e6f2fa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "c0d20859624fec7c"
            ]
        ]
    },
    {
        "id": "c0d20859624fec7c",
        "type": "json",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Convertir a JSON",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "003b5c9417b86052",
                "c52823c2648ac6b9",
                "e28bc44079c294e3"
            ]
        ]
    },
    {
        "id": "003b5c9417b86052",
        "type": "switch",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "¬øEs PRINTING?",
        "property": "payload.state_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRINTING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "87404189561b8b63",
                "b21761e1d4ef89d6"
            ],
            [
                "b79d824ddf761ac3",
                "aed6b54bee536e90"
            ]
        ]
    },
    {
        "id": "87404189561b8b63",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Reiniciar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "timerStart",
                "pt": "flow",
                "to": "null",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "printing",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "b79d824ddf761ac3",
        "type": "change",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Activar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "timerStart",
                "pt": "flow",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "printing",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2f80d0c78e3b5948",
        "type": "inject",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Cada 5 segundos",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "063d8c1085577384"
            ]
        ]
    },
    {
        "id": "063d8c1085577384",
        "type": "switch",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "¬øTimer activo?",
        "property": "timerActive",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 580,
        "wires": [
            [
                "5e4b2f807833f688"
            ],
            [
                "fd664f984a9cb409"
            ]
        ]
    },
    {
        "id": "fd664f984a9cb409",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Verificar tiempo",
        "func": "var timerStart = flow.get('timerStart');\n\nif (!timerStart) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar startTime = new Date(timerStart);\nif (isNaN(startTime.getTime())) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar currentTime = new Date();\nvar diff = currentTime.getTime() - startTime.getTime();\nvar thirtyMinutes = 30 * 60 * 1000;\n\nif (diff < thirtyMinutes) {\n    return msg;\n} else {\n    flow.set('timerActive', false);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 620,
        "wires": [
            [
                "fcc79aa85847db8e",
                "f00d064bd27cf6f5"
            ]
        ]
    },
    {
        "id": "c52823c2648ac6b9",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "state_id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.state_id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 360,
        "wires": []
    },
    {
        "id": "e28bc44079c294e3",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Print_ID",
        "func": "let estadoNuevo = msg.payload.state_string;\nlet datos = flow.get(\"print_id\") || {};\nvar startTime = new Date();\nvar id = flow.get(\"print_id\");\n\nif (estadoNuevo === \"Starting\") {\n    const id = global.get(\"generate_id\")(\"print_id\");\n    flow.set('print_id', id)\n}\n\n\nmsg.payload = { id: id };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "e3fc1d2b3c4cf980"
            ]
        ]
    },
    {
        "id": "e3fc1d2b3c4cf980",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Debug ID",
        "active": false,
        "tosidebar": true,
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "b21761e1d4ef89d6",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Reiniciar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Reiniciar temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "aed6b54bee536e90",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Activar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Activar temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "05a30f8e2bbc56f7",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Imprimiendo",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Obtener dato porque esta imprimiendo\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "5e4b2f807833f688",
        "type": "switch",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Esta imprimiendo?",
        "property": "printing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 560,
        "wires": [
            [
                "05a30f8e2bbc56f7",
                "f00d064bd27cf6f5"
            ],
            [
                "0452b54d74a040ef"
            ]
        ]
    },
    {
        "id": "fcc79aa85847db8e",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Temporizador activo",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Obtener dato por el temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 620,
        "wires": []
    },
    {
        "id": "0452b54d74a040ef",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Fin de los datos",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Fin de la recojida de datos\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "f00d064bd27cf6f5",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "28d2722965910b68",
        "name": "Llamar a los datos",
        "mode": "link",
        "links": [
            "e68648e2816767db"
        ],
        "x": 755,
        "y": 600,
        "wires": []
    },
    {
        "id": "33456c2b63b234f6",
        "type": "http in",
        "z": "a2a9e5be90c88c9b",
        "g": "d87a84c928c9da8b",
        "name": "Endpoint alerta /octo-alarm",
        "url": "/octo-alarm",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2120,
        "wires": [
            [
                "d89ca2751ac56b24",
                "df62a9932f8acd75",
                "3fd8a46a266d1ee8"
            ]
        ]
    },
    {
        "id": "d89ca2751ac56b24",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "d87a84c928c9da8b",
        "name": "Alerta recibida",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ALLLARMAAA\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 2120,
        "wires": []
    },
    {
        "id": "df62a9932f8acd75",
        "type": "http response",
        "z": "a2a9e5be90c88c9b",
        "g": "d87a84c928c9da8b",
        "name": "Respuesta OK",
        "statusCode": "200",
        "headers": {},
        "x": 440,
        "y": 2160,
        "wires": []
    },
    {
        "id": "3fd8a46a266d1ee8",
        "type": "link out",
        "z": "a2a9e5be90c88c9b",
        "g": "d87a84c928c9da8b",
        "name": "out-octo-alert",
        "mode": "link",
        "links": [
            "b14e89452c265e29"
        ],
        "x": 375,
        "y": 2200,
        "wires": []
    },
    {
        "id": "c86e205f6efb5a4f",
        "type": "ui_toast",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Error en la impresi√≥n",
        "x": 520,
        "y": 1700,
        "wires": []
    },
    {
        "id": "b14e89452c265e29",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "name": "link in 4",
        "links": [
            "3fd8a46a266d1ee8"
        ],
        "x": 75,
        "y": 1700,
        "wires": [
            [
                "81d0ebae3a39c876"
            ]
        ]
    },
    {
        "id": "b2e5b7039d684c81",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "66873d681da67a9e",
        "name": "PUT actualizar octoia",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities/octo-alarm/attrs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "63649160388b7d52",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "66873d681da67a9e",
        "name": "Preparar JSON octo-alarm false",
        "func": "delete msg.url;\nlet result = msg.payload.printSuccessful.value\nmsg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  octoia: { value: result, type: \"Boolean\" }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2040,
        "wires": [
            [
                "b2e5b7039d684c81"
            ]
        ]
    },
    {
        "id": "7904c491ee17a22f",
        "type": "link in",
        "z": "a2a9e5be90c88c9b",
        "g": "66873d681da67a9e",
        "name": "out-orion",
        "links": [
            "26f6348e04fac4ce"
        ],
        "x": 65,
        "y": 2040,
        "wires": [
            [
                "63649160388b7d52"
            ]
        ]
    },
    {
        "id": "f1d40dcef0aaefd6",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Listar suscripciones",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/subscriptions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 1900,
        "wires": [
            [
                "4edb16a71e5d7628"
            ]
        ]
    },
    {
        "id": "4edb16a71e5d7628",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "¬øYa existe subscripci√≥n?",
        "func": "let yaExiste = false;\n\nfor (let sub of msg.payload) {\n    if (sub.subject && sub.subject.entities) {\n        for (let entidad of sub.subject.entities) {\n            if (entidad.id === \"octo-alarm\") {\n                yaExiste = true;\n                break;\n            }\n        }\n    }\n    if (yaExiste) break;\n}\nmsg.payload = yaExiste;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1900,
        "wires": [
            [
                "9bec7c28040fe559"
            ]
        ]
    },
    {
        "id": "ad5801c72a25da7a",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Ya existe una subscripci√≥n",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Ya existe una subscripci√≥n\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1880,
        "wires": []
    },
    {
        "id": "deaa5a6d1045185f",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Preparar JSON suscripci√≥n",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  description: \"Alerta para la impresi√≥n\",\n  subject: {\n    entities: [{ id: \"octo-alarm\", type: \"Sensor\" }],\n    condition: { \n      attrs: [\"octoia\"],\n      expression: { q: \"octoia==false\" } \n        }\n  },\n  notification: {\n    http: { url: \"http://node-red:1880/octo-alarm\" },\n    attrs: [\"octoia\"]\n  },\n  throttling: 0\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1920,
        "wires": [
            [
                "21cc8df8d244183d"
            ]
        ]
    },
    {
        "id": "21cc8df8d244183d",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "POST crear suscripci√≥n",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/subscriptions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1470,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "9bec7c28040fe559",
        "type": "switch",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Ya esiste?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1900,
        "wires": [
            [
                "ad5801c72a25da7a"
            ],
            [
                "deaa5a6d1045185f",
                "4c105848ce8fe9e0"
            ]
        ]
    },
    {
        "id": "4c105848ce8fe9e0",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Crear suscripci√≥n",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Crear suscripci√≥n\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1960,
        "wires": []
    },
    {
        "id": "e994810b1f604ae3",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Preparar entidad JSON",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  id: \"octo-alarm\",\n  type: \"Sensor\",\n  octoia: { value: false, type: \"Boolean\" }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1860,
        "wires": [
            [
                "a542d63cb2758eaa"
            ]
        ]
    },
    {
        "id": "a542d63cb2758eaa",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "POST crear entidad",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "faa48cef8ae65465",
        "type": "inject",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "Eliminar/Crear Entidad y Subscribirse",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1900,
        "wires": [
            [
                "f1d40dcef0aaefd6",
                "d8afaa31a78681da"
            ]
        ]
    },
    {
        "id": "d8afaa31a78681da",
        "type": "http request",
        "z": "a2a9e5be90c88c9b",
        "g": "edb5b5bf9e74af16",
        "name": "DELETE entidad SensorAlarma001",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities/octo-alarm",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 1820,
        "wires": [
            [
                "e994810b1f604ae3"
            ]
        ]
    },
    {
        "id": "81d0ebae3a39c876",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "name": "Mensaje",
        "func": "msg.payload=\"La IA ha detectado un error\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1700,
        "wires": [
            [
                "c86e205f6efb5a4f"
            ]
        ]
    },
    {
        "id": "20ad96f19df72948",
        "type": "exec",
        "z": "a2a9e5be90c88c9b",
        "command": "cat /data/octoprintapi",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 60,
        "wires": [
            [
                "d6d36cfab3c119cb"
            ],
            [
                "28b763affa839963"
            ],
            []
        ]
    },
    {
        "id": "d6d36cfab3c119cb",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "name": "OCTOPRINT_API_KEY",
        "func": "msg.payload = msg.payload.toString().trim(); // <-- elimina \\n y espacios\nlet octoprintapi = msg.payload;\n\nif(octoprintapi===\"\"){\n    msg.payload = \"El fichero 'octoprintapi' esta vacio\"    \n}else{\n    flow.set(\"OCTOPRINT_API_KEY\", octoprintapi);\n    msg.payload = octoprintapi;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 20,
        "wires": [
            [
                "e738c5296a082d74"
            ]
        ]
    },
    {
        "id": "64bc7883048d6729",
        "type": "inject",
        "z": "a2a9e5be90c88c9b",
        "name": "Inicio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "20ad96f19df72948",
                "b87506e442f55d23"
            ]
        ]
    },
    {
        "id": "b87506e442f55d23",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "name": "Code",
        "func": "global.set(\"generateUUIDv4\", function () {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n});\n\nglobal.set(\"generate_id\", function (prefix) {\n    const uuid = global.get(\"generateUUIDv4\")();\n    const timestamp = Date.now();\n    return `${prefix}_${uuid}_${timestamp}`;\n});\n\nflow.set(\"OCTOPRINT_URL\", \"http://octoprint:5000\")\nflow.set('timerActive', null)\nflow.set('timerStart', null)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "28b763affa839963",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "name": "Error fichero",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"No se ha podido leer el fichero 'octoprintapi'\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 60,
        "wires": []
    },
    {
        "id": "e738c5296a082d74",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "name": "API KEY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"API KEY para octo-print: \" & payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 20,
        "wires": []
    },
    {
        "id": "9d2ee16cd339a92d",
        "type": "catch",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "Catch file read errors",
        "scope": [
            "da70627a2bd39c82"
        ],
        "uncaught": false,
        "x": 480,
        "y": 220,
        "wires": [
            [
                "d72c070cb182e9b0"
            ]
        ]
    },
    {
        "id": "d72c070cb182e9b0",
        "type": "debug",
        "z": "a2a9e5be90c88c9b",
        "g": "f0022ec11f6d06c9",
        "name": "id.txt error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"El fichero de id.txt no existe, se le asignara un nuevo ID de usuario\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 220,
        "wires": []
    },
    {
        "id": "458d64306dc7a946",
        "type": "function",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "name": "Unificar datos printer + imagen",
        "func": "let data = msg.payload;\n\n// Tiempo transcurrido\nlet secs = 0;\ntry {\n  secs = parseInt(data.printTime.elapsed.value || 0);\n} catch (e) {\n  secs = 0;\n}\nlet h = Math.floor(secs / 3600);\nlet m = Math.floor((secs % 3600) / 60);\nlet s = secs % 60;\nlet elapsed = `${h}h ${m}m ${s}s`;\n\n// Estado\nlet status = \"UNKNOWN\";\ntry {\n  status = data.status.value.toUpperCase();\n} catch (e) {\n  status = \"UNKNOWN\";\n}\n\nlet color = \"#999\";\nif (status === \"PRINTING\") color = \"#42a5f5\";\nelse if (status === \"PAUSED\") color = \"#ffb74d\";\nelse if (status === \"DONE\") color = \"#81c784\";\n\n// Archivo\nlet file = \"\";\ntry {\n  file = data.file.value;\n} catch (e) {\n  file = \"\";\n}\n\n// Progreso\nlet progress = 0;\ntry {\n  progress = data.progress.value;\n} catch (e) {\n  progress = 0;\n}\n\n// Temperaturas\nlet roomTemp = \"0.0 ¬∞C\";\ntry {\n  roomTemp = data.environment.roomTemperature.value.toFixed(1) + \" ¬∞C\";\n} catch (e) {\n  roomTemp = \"0.0 ¬∞C\";\n}\n\nlet bedTemp = \"0.0 ¬∞C\";\ntry {\n  bedTemp = data.temperatures.bed.actual.value.toFixed(1) + \" ¬∞C\";\n} catch (e) {\n  bedTemp = \"0.0 ¬∞C\";\n}\n\nlet nozzleTemp = \"0.0 ¬∞C\";\ntry {\n  nozzleTemp = data.temperatures.nozzle.actual.value.toFixed(1) + \" ¬∞C\";\n} catch (e) {\n  nozzleTemp = \"0.0 ¬∞C\";\n}\n\nlet nozzleTargetTemp = \"0.0 ¬∞C\";\ntry {\n  nozzleTargetTemp = data.temperatures.nozzle.target.value.toFixed(1) + \" ¬∞C\";\n} catch (e) {\n  nozzleTargetTemp = \"0.0 ¬∞C\";\n}\n\nlet bedTargetTemp = \"0.0 ¬∞C\";\ntry {\n  bedTargetTemp = data.temperatures.bed.target.value.toFixed(1) + \" ¬∞C\";\n} catch (e) {\n  bedTargetTemp = \"0.0 ¬∞C\";\n}\n\n// Imagen\nlet image = \"\";\ntry {\n  image = data.image?.value || \"\";\n} catch (e) {\n  image = \"\";\n}\n\n// Salida\nmsg.payload = {\n  file: file,\n  status: status,\n  statusColor: color,\n  elapsed: elapsed,\n  progress: progress,\n  temps: {\n    room: roomTemp,\n    bed: bedTemp,\n    bedTarget: bedTargetTemp,\n    nozzle: nozzleTemp,\n    nozzleTarget: nozzleTargetTemp\n  },\n  image: image\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1660,
        "wires": [
            [
                "21d0a4547ac18d10"
            ]
        ]
    },
    {
        "id": "21d0a4547ac18d10",
        "type": "ui_template",
        "z": "a2a9e5be90c88c9b",
        "g": "4422e37b61e3151f",
        "group": "b8e740f97a0fd06f",
        "name": "Panel Completo Moderno",
        "order": 1,
        "width": "24",
        "height": "10",
        "format": "<style>\n\n  html, body {\n    margin: 0;\n    padding: 0;\n    background: transparent !important;\n  }\n\n  .dashboard-modern {\n    display: flex;\n    gap: 2%;\n    height: calc(100vh - 60px);\n    box-sizing: border-box;\n    padding: 2%;\n    font-family: 'Segoe UI', sans-serif;\n    background-color: transparent !important;\n    color: #333;\n  }\n\n  .card {\n    background: white;\n    border-radius: 16px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n    padding: 2%;\n    flex: 1;\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-start;\n    gap: 1.5em;\n    font-size: 1.2vw;\n  }\n\n  .card h2 {\n    margin: 0;\n    font-size: 1.2em;\n    border-bottom: 1px solid #ddd;\n    padding-bottom: 0.3em;\n    color: #1976d2;\n  }\n\n  .status-value {\n    font-weight: bold;\n  }\n\n  .progress-bar {\n    background: #e0e0e0;\n    border-radius: 12px;\n    overflow: hidden;\n    height: 1.8em;\n    width: 80%;\n    margin: auto;\n    position: relative;\n  }\n\n  .progress-bar-inner {\n    background: linear-gradient(90deg, #64b5f6, #4db6ac);\n    height: 100%;\n    transition: width 0.3s ease;\n  }\n\n  .progress-bar-text {\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%);\n  height: 1.8em;\n  line-height: 1.8em;\n  font-weight: normal;\n  color: black;\n  font-size: 0.9em;\n  pointer-events: none;\n  user-select: none;\n  }\n\n  .image-container {\n    flex: 1;\n    background: white;\n    border-radius: 12px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n    overflow: hidden;\n    padding: 1%;\n    gap: 0.5em;\n  }\n\n  .image-container h2 {\n    width: 100%;\n    text-align: center;\n    margin: 0;\n    color: #1976d2;\n    border-bottom: 1px solid #ddd;\n    padding-bottom: 0.3em;\n    font-size: 1.2em;\n  }\n\n  .image-container img {\n    max-width: 100%;\n    max-height: 100%;\n    object-fit: contain;\n    display: block;\n  }\n\n  .image-container span {\n    color: #999;\n    font-size: 1em;\n  }\n</style>\n\n<div class=\"dashboard-modern\">\n  <div class=\"card\">\n    <h2>Estado de Impresi√≥n</h2>\n    <p><strong>Archivo:</strong> {{msg.payload.file}}</p>\n    <p><strong>Estado:</strong>\n      <span class=\"status-value\" style=\"color: {{msg.payload.statusColor}};\">{{msg.payload.status}}</span>\n    </p>\n    <p><strong>Tiempo Transcurrido:</strong> {{msg.payload.elapsed}}</p>\n    <div class=\"progress-bar\">\n      <div class=\"progress-bar-inner\" style=\"width: {{msg.payload.progress}}%;\"></div>\n      <div class=\"progress-bar-text\">{{msg.payload.progress}}%</div>\n    </div>\n  </div>\n\n  <div class=\"card\">\n    <h2>Temperaturas</h2>\n    <p><strong>Habitaci√≥n:</strong> {{msg.payload.temps.room}}</p>\n    <p><strong>Base:</strong> {{msg.payload.temps.bed}}</p>\n    <p><strong>Target Base:</strong> {{msg.payload.temps.bedTarget}}</p>\n    <p><strong>Boquilla:</strong> {{msg.payload.temps.nozzle}}</p>\n    <p><strong>Target Boquilla:</strong> {{msg.payload.temps.nozzleTarget}}</p>\n  </div>\n\n  <div class=\"card image-container\">\n    <h2>Imagen</h2>\n    <img ng-if=\"msg.payload.image\" ng-src=\"data:image/jpeg;base64,{{msg.payload.image}}\">\n    <span ng-if=\"!msg.payload.image\">Sin imagen disponible</span>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 530,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "89e380a1c824ddad",
        "type": "kafkajs-client",
        "name": "octo-kafka",
        "brokers": "kafka:9092",
        "clientid": "nodered-producer",
        "connectiontimeout": 3000,
        "requesttimeout": 25000,
        "advancedretry": false,
        "maxretrytime": 30000,
        "initialretrytime": 300,
        "factor": 0.2,
        "multiplier": 2,
        "retries": 5,
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "4b50b82dd1e6f2fa",
        "type": "mqtt-broker",
        "name": "Octo-MQTT",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "5",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "b8e740f97a0fd06f",
        "type": "ui_group",
        "name": "Pantalla Completa",
        "tab": "186a0a69b9b5c06d",
        "order": 1,
        "disp": false,
        "width": "24",
        "collapse": false,
        "className": ""
    },
    {
        "id": "186a0a69b9b5c06d",
        "type": "ui_tab",
        "name": "Octo-Data Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]