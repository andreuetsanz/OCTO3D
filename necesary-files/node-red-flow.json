[
    {
        "id": "128aa5cf7f19b872",
        "type": "tab",
        "label": "Get_Data_From_Octoprint",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6554eaf24f3301c5",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "GET OCTOPRINT DATA",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "15149959834d55d4",
            "5ed068ddf703b120",
            "9ce3e248714ecc7c",
            "2f1fb89ca713424a",
            "beca61d4059fbb6c",
            "bf3decc96e99af4a",
            "8ea1f925d1110caf",
            "a976bfeb5c0ec0de",
            "f7943ebf33dd8366",
            "79ecda98e90af27c",
            "9f684c6e363ccd13",
            "1f37cd4514231950",
            "109e563c15388241",
            "0742771261fba357",
            "128e9488f1257725",
            "9a5867a62475db51",
            "6458d3505d52204e",
            "ad5ce31ea07e9d35",
            "1ce1d23cb1b995f8",
            "49556c9a63bab5dd",
            "6a157fe845a720fc",
            "5e7cd0fc9bb4b0bc",
            "8baaa7a44bda0738",
            "b28ca6427025442a",
            "73e6eeb28b5094d2",
            "1973f07ec12899cc",
            "257bee5770153a14",
            "520f0530e3b3aa62",
            "ef89cada522d26af",
            "ee5f0423d88336bf",
            "9a23b6a7fc2c454d",
            "b00339a3a774a085",
            "11b28f3d3fc7c4a3",
            "fb55fff99835f2ac",
            "5de610cd6b6e4270",
            "e8be6c2d807e63d0",
            "b7acc809da4d53bf",
            "b951daf915408c23",
            "d3645c9ffc7b2ae3",
            "637858ccdecedace",
            "55d0659e989b1cbb",
            "3e5ca6621f765aca",
            "fcf3c314f470b7cf",
            "e73ed9386313dce7",
            "93084432de6c3132"
        ],
        "x": 33,
        "y": 679,
        "w": 1653,
        "h": 782
    },
    {
        "id": "266f6d3eca23ba9f",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "Kafka",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true
        },
        "nodes": [
            "459d586a76964385",
            "828ab81728f97ea1",
            "9872f623f72c382d",
            "e82fa3f4a931dc82"
        ],
        "x": 34,
        "y": 1479,
        "w": 552,
        "h": 122
    },
    {
        "id": "a0d0030ba181d9c6",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "USER ID",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "345d71275dbccd53",
            "a5a56a49b4881d13",
            "7ba7ab8886472d6d",
            "f5a0c706b44eb215",
            "0e6982e00cfbd542",
            "53910cda7198a11c",
            "9e08ad373197cb06"
        ],
        "x": 34,
        "y": 159,
        "w": 1292,
        "h": 102
    },
    {
        "id": "8d08067f2ec91c15",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "Panel 3D Printer",
        "style": {
            "stroke": "#00bcd4",
            "fill": "#e0f7fa",
            "label": true
        },
        "nodes": [
            "6e0e6ceea2f2b8de",
            "0b12c575a8f788b6",
            "c6871569fb8c002e",
            "f04a804c1f95a5cd",
            "235b5a345bf1b63e",
            "a35ae2a915971c6c"
        ],
        "x": 34,
        "y": 1619,
        "w": 612,
        "h": 122
    },
    {
        "id": "cf557127a689e17d",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "IS PRINTING?",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "be45507378d0c67a",
            "5575cc990afae85d",
            "7a15e65e1588064d",
            "c250c05be67c669b",
            "53b4eab8fa19e5eb",
            "c7dc32fcc6ecffda",
            "1bbdc14472d2bf17",
            "f24fa294eb8453f0",
            "6ff6fddc6c13593b",
            "596c3915c537f8be",
            "a96e8b7fe5bbc838",
            "4c6b4984539f8f77",
            "26793a763eb07761",
            "e4603c18750ac468",
            "437481b663498afe",
            "d3fac3306dbfbd2f",
            "51c9bd60c2177d88",
            "99cfacb242f8903c"
        ],
        "x": 34,
        "y": 279,
        "w": 1032,
        "h": 382
    },
    {
        "id": "32dd2a56326e82fb",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "ORION",
        "style": {
            "stroke": "#ffC000",
            "fill": "#ffefbf",
            "label": true
        },
        "nodes": [
            "21fdc1a59df75649",
            "38f8516fe1e134ea",
            "7ad93da51dfd2132",
            "3a84a8cc3a806c7e",
            "7ff017f7c04d1f3e"
        ],
        "x": 24,
        "y": 1753,
        "w": 1608,
        "h": 514
    },
    {
        "id": "21fdc1a59df75649",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "g": "32dd2a56326e82fb",
        "name": "Endpoint",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#b797cf",
            "label": true,
            "label-position": "n",
            "color": "#ffffff"
        },
        "nodes": [
            "0e2b1c9bbf3d7352",
            "5a36652e24139665",
            "7138754d46d2ce99",
            "4208386dfd5dfad1"
        ],
        "x": 54,
        "y": 2079,
        "w": 512,
        "h": 162
    },
    {
        "id": "7ff017f7c04d1f3e",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "g": "32dd2a56326e82fb",
        "name": "Preparar entorno Orion",
        "style": {
            "label": true
        },
        "nodes": [
            "fbfd687d777249af",
            "b8de993ca808fb44",
            "5e9e974e9a160502",
            "eac7a94413e031e7",
            "cd25718b2b2868e5",
            "46a78b7197f2ecf0",
            "ab28c3cc7c795ca5",
            "ef2bcd43fdefec41",
            "8e59531b66222787",
            "e3e09458bc369b14",
            "68c9ed361d01f204"
        ],
        "x": 54,
        "y": 1779,
        "w": 1552,
        "h": 222
    },
    {
        "id": "8ea1f925d1110caf",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "GET",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "1f37cd4514231950",
                "73e6eeb28b5094d2",
                "520f0530e3b3aa62",
                "ef89cada522d26af",
                "ee5f0423d88336bf",
                "9a23b6a7fc2c454d",
                "b00339a3a774a085"
            ]
        ]
    },
    {
        "id": "a976bfeb5c0ec0de",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=printer",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printer",
                "tot": "str"
            }
        ],
        "x": 780,
        "y": 780,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "f7943ebf33dd8366",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=job",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "job",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 840,
        "wires": [
            [
                "79ecda98e90af27c",
                "6458d3505d52204e"
            ]
        ]
    },
    {
        "id": "79ecda98e90af27c",
        "type": "join",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Unir",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1070,
        "y": 900,
        "wires": [
            [
                "128e9488f1257725"
            ]
        ]
    },
    {
        "id": "9f684c6e363ccd13",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Resultado Final",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 960,
        "wires": []
    },
    {
        "id": "1f37cd4514231950",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "ID",
        "func": "// Generar timestamp\nlet timestamp = Date.now();\nlet maxletas = 5;\n\n// Funci√≥n para generar 3 letras aleatorias\nfunction generateUUIDv4() {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n// Crear el ID\nconst id = global.get(\"generate_id\")(\"opr\");\nmsg.payload = id\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "109e563c15388241"
            ]
        ]
    },
    {
        "id": "109e563c15388241",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=id",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "id",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "0742771261fba357",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=files",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "files",
                "tot": "str"
            }
        ],
        "x": 784,
        "y": 898.9999389648438,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "128e9488f1257725",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Formato JSON Schema",
        "func": "const data = msg.payload || {};\nconst printer = data.printer || {};\nconst job = data.job || {};\nconst id = data.id || {};\nconst displayLayerProgress = data.displayLayerProgress || {};\nconst gcode = data.gcode || {};\nconst img = data.img || {};\nconst printSuccessful = data.printSuccessful;\nconst roomTemperature = data.roomTemperature || {};\n\nconst files = data.files?.files || [];\nconst currentFilePath = job.job?.file?.path;\n\nlet matchedFile = files.find(f => f.path === currentFilePath);\nlet estimatedTime = matchedFile?.gcodeAnalysis?.estimatedPrintTime ?? (job.progress?.printTime ?? 0) + (job.progress?.printTimeLeft ?? 0);\n\nmsg.payload = {\n    id: id,\n    user_id: global.get('user_id'),\n    print_id: flow.get('print_id'),\n    type: \"3DPrinter\",\n    timestamp: new Date().toISOString(),\n\n    temperatures: {\n        nozzle: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.target ?? null,\n                unitCode: \"CEL\"\n            }\n\n        },\n        bed: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.target ?? null,\n                unitCode: \"CEL\"\n            }\n        }\n    },\n\n    environment: {\n        roomTemperature: {\n        value: roomTemperature ?? null,\n        unitCode: \"CEL\"\n        }\n    },\n\n    fanSpeed:{\n        type: \"Property\",\n        value: displayLayerProgress.fanSpeed ?? null,\n        unitCode: \"P1\"\n    },\n\n    printTime: {\n        elapsed: {\n            type: \"Property\",\n            value: job.progress?.printTime ?? null,\n            unitCode: \"SEC\"\n        },\n        estimated: {\n            type: \"Property\",\n            value: estimatedTime,\n            unitCode: \"SEC\"\n        }\n    },\n\n    printer: {\n        type: \"Property\",\n        value: gcode.printer ?? null\n    },\n\n    filament: {\n        type: \"Property\",\n        value: {\n            type: gcode.filament ?? null,\n            brand: gcode.filament_brand ?? null,\n            used: gcode.filament_used ?? null,\n        }\n    },\n\n    slicer: {\n        type: \"Property\",\n        value: gcode.slicer ?? null\n    },\n\n    printSuccessful: {\n        type: \"Property\",\n        value: printSuccessful ?? null\n    },\n\n    status: {\n        type: \"Property\",\n        value: job.state ?? null\n    },\n\n    image: {\n        type: \"Property\",\n        value: img ?? null\n    },\n\n    file: {\n        type: \"Property\",\n        value: currentFilePath\n    },\n    progress:{\n        type: \"Property\",\n        value: isNaN(parseInt(displayLayerProgress.print.progress)) ? null : parseInt(displayLayerProgress.print.progress)\n    },\n    layer: {\n        currentLayer: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.current ?? null\n        },\n        totalLayers: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.total ?? null,\n        }\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "b951daf915408c23",
                "9f684c6e363ccd13"
            ]
        ]
    },
    {
        "id": "9a5867a62475db51",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=DisplayLayerProgress",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "displayLayerProgress",
                "tot": "str"
            }
        ],
        "x": 830,
        "y": 960,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "6458d3505d52204e",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Descargar G-code",
        "func": "const nombreArchivo = msg.payload.job.file.path;\nmsg.filename = nombreArchivo;\nmsg.url = `${flow.get('OCTOPRINT_URL')}/downloads/files/local/${nombreArchivo}`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "ad5ce31ea07e9d35"
            ]
        ]
    },
    {
        "id": "ad5ce31ea07e9d35",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "1ce1d23cb1b995f8"
            ]
        ]
    },
    {
        "id": "1ce1d23cb1b995f8",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "49556c9a63bab5dd"
        ],
        "x": 1495,
        "y": 840,
        "wires": []
    },
    {
        "id": "49556c9a63bab5dd",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 1",
        "links": [
            "1ce1d23cb1b995f8"
        ],
        "x": 335,
        "y": 1020,
        "wires": [
            [
                "5e7cd0fc9bb4b0bc"
            ]
        ]
    },
    {
        "id": "6a157fe845a720fc",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=gcode",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gcode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1020,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "5e7cd0fc9bb4b0bc",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Parse G-code Info",
        "func": "let gcode = msg.payload;\n\nlet slicer = 'Desconocido';\nlet printer = '';\nlet filament = '';        // Tipo: PLA, PETG, etc.\nlet filamentBrand = '';   // Marca: eSun, Prusament, etc.\nlet filamentUsed = '';    // Usado: 5.23m, 15g, etc.\n\n// Lista de laminadores conocidos con variaciones de nombres\nconst slicers = {\n    'Ultimaker Cura': ['cura', 'ultimaker cura', 'cura_steamengine', 'cura-steamengine'],\n    'PrusaSlicer': ['prusaslicer', 'prusa slicer', 'prusaslicer'],\n    'Bambu Studio': ['bambu studio', 'bambu_studio', 'bambu-studio'],\n    'Creality Print': ['creality print', 'creality_print'],\n    'Slic3r': ['slic3r', 'slic3r pe', 'slic3r_pe'],\n    'IdeaMaker': ['ideamaker', 'idea_maker'],\n    'Simplify3D': ['simplify3d', 'simplify 3d'],\n    'MatterControl': ['mattercontrol', 'matter control'],\n    'ReplicatorG': ['replicatorg', 'replicator g'],\n    'FlashPrint': ['flashprint', 'flash print'],\n    'ZeroSlicer': ['zeroslicer', 'zero slicer'],\n    'Kiri Moto': ['kirimotors', 'kiri motors']\n};\n\n// Funci√≥n para verificar si alguna palabra del laminador aparece en el G-code\nfunction detectSlicer(gcode, slicerNames) {\n    for (let slicerName of slicerNames) {\n        let regex = new RegExp(slicerName, 'i');\n        if (regex.test(gcode)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Verificar slicer\nfor (let [name, variations] of Object.entries(slicers)) {\n    if (detectSlicer(gcode, variations)) {\n        slicer = name;\n        break;\n    }\n}\n\n// Detectar impresora con m√∫ltiples patrones comunes\nlet printerRegexes = [\n    /; ?(MACHINE_NAME|printer_model) *= *(.+)/i,\n    /; ?print_compatible_printers *= *(.+)/i,\n    /; ?printer_name *= *(.+)/i,\n    /; ?model *= *(.+)/i\n];\n\nfor (let regex of printerRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        printer = match?.[2]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar tipo de filamento (PLA, PETG, etc.)\nlet filamentTypeRegexes = [\n    /; ?filament_type *= *(.+)/i,\n    /; ?filament_material *= *(.+)/i\n];\n\nfor (let regex of filamentTypeRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filament = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar marca del filamento\nlet filamentBrandRegexes = [\n    /; ?filament_brand *= *(.+)/i,\n    /; ?filament_settings_id *= *(.+)/i\n];\n\n\nfor (let regex of filamentBrandRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filamentBrand = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar cantidad de filamento usado\n\n// 1. Buscar exactamente: \"; filament used [g] = ...\"\nlet usedGramsExact = gcode.match(/; ?filament used \\[g\\] *= *([^\\n]+)/i);\nif (usedGramsExact) {\n    filamentUsed = usedGramsExact[1].trim();\n} else {\n    // 2. Buscar una l√≠nea que contenga \"filament_user\" y tambi√©n una \"g\"\n    let userLineMatch = gcode.match(/^.*filament_user.*g.*$/gim);\n    if (userLineMatch && userLineMatch.length > 0) {\n        // Extraer solo el valor despu√©s del signo \"=\" si lo hay\n        let valueMatch = userLineMatch[0].match(/= *([^\\n]+)/);\n        if (valueMatch) {\n            filamentUsed = valueMatch[1].trim();\n        } else {\n            filamentUsed = userLineMatch[0].trim(); // L√≠nea completa como fallback\n        }\n    } else {\n        // 3. Buscar con los patrones comunes\n        let filamentUsedRegexes = [\n            /; ?filament used(?: *\\[.*\\])? *= *(.+)/i,\n            /; ?filament_used *= *(.+)/i,\n            /; ?filament_consumed *= *(.+)/i\n        ];\n\n        for (let regex of filamentUsedRegexes) {\n            let match = gcode.match(regex);\n            if (match) {\n                filamentUsed = match[1].trim();\n                break;\n            }\n        }\n    }\n}\n\n\n// Resultado\nmsg.payload = {\n    slicer: slicer,\n    printer: printer,\n    filament: filament,\n    filament_brand: filamentBrand,\n    filament_used: filamentUsed\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "6a157fe845a720fc"
            ]
        ]
    },
    {
        "id": "8baaa7a44bda0738",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=img",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "img",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "b28ca6427025442a",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=printSuccessful",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printSuccessful",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "73e6eeb28b5094d2",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Obtener imaguen",
        "links": [
            "3e5ca6621f765aca"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1080,
        "wires": [
            [
                "8baaa7a44bda0738",
                "257bee5770153a14"
            ]
        ]
    },
    {
        "id": "1973f07ec12899cc",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=roomTemperature",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "roomTemperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "257bee5770153a14",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "IA",
        "links": [
            "15149959834d55d4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "b28ca6427025442a"
            ]
        ]
    },
    {
        "id": "520f0530e3b3aa62",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "roomTemperature",
        "links": [
            "9ce3e248714ecc7c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1200,
        "wires": [
            [
                "1973f07ec12899cc"
            ]
        ]
    },
    {
        "id": "15149959834d55d4",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 2",
        "links": [],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "beca61d4059fbb6c"
            ]
        ]
    },
    {
        "id": "5ed068ddf703b120",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 275,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9ce3e248714ecc7c",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 3",
        "links": [],
        "x": 75,
        "y": 1420,
        "wires": [
            [
                "bf3decc96e99af4a"
            ]
        ]
    },
    {
        "id": "2f1fb89ca713424a",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 355,
        "y": 1420,
        "wires": []
    },
    {
        "id": "beca61d4059fbb6c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "IA",
        "func": "let ran = Math.random();\nif (ran < 0.80) {\n    msg.payload = true\n}else{\n    msg.payload = false\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "5ed068ddf703b120",
                "93084432de6c3132"
            ]
        ]
    },
    {
        "id": "bf3decc96e99af4a",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "roomTemperature",
        "func": "msg.payload = +(Math.random() + 30).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "2f1fb89ca713424a"
            ]
        ]
    },
    {
        "id": "ef89cada522d26af",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Estado OctoPrint",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/printer`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "11b28f3d3fc7c4a3"
            ]
        ]
    },
    {
        "id": "ee5f0423d88336bf",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Job Info",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/job`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 840,
        "wires": [
            [
                "fb55fff99835f2ac"
            ]
        ]
    },
    {
        "id": "9a23b6a7fc2c454d",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Files",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/files`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 900,
        "wires": [
            [
                "5de610cd6b6e4270"
            ]
        ]
    },
    {
        "id": "b00339a3a774a085",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "DisplayLayerProgress",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/plugin/DisplayLayerProgress/values`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 960,
        "wires": [
            [
                "e8be6c2d807e63d0"
            ]
        ]
    },
    {
        "id": "11b28f3d3fc7c4a3",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "a976bfeb5c0ec0de"
            ]
        ]
    },
    {
        "id": "fb55fff99835f2ac",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "f7943ebf33dd8366"
            ]
        ]
    },
    {
        "id": "5de610cd6b6e4270",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "0742771261fba357"
            ]
        ]
    },
    {
        "id": "e8be6c2d807e63d0",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "9a5867a62475db51"
            ]
        ]
    },
    {
        "id": "b7acc809da4d53bf",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Pedir los datos",
        "links": [
            "99cfacb242f8903c"
        ],
        "x": 125,
        "y": 1140,
        "wires": [
            [
                "1f37cd4514231950",
                "ef89cada522d26af",
                "ee5f0423d88336bf",
                "9a23b6a7fc2c454d",
                "b00339a3a774a085",
                "73e6eeb28b5094d2",
                "520f0530e3b3aa62"
            ]
        ]
    },
    {
        "id": "b951daf915408c23",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "out-printer_data",
        "mode": "link",
        "links": [
            "828ab81728f97ea1",
            "c6871569fb8c002e",
            "3a84a8cc3a806c7e"
        ],
        "x": 1495,
        "y": 900,
        "wires": []
    },
    {
        "id": "828ab81728f97ea1",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "lin-printer_data-kafka",
        "links": [
            "b951daf915408c23"
        ],
        "x": 75,
        "y": 1540,
        "wires": [
            [
                "9872f623f72c382d"
            ]
        ]
    },
    {
        "id": "9872f623f72c382d",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "kafka Data",
        "func": "msg.payload = JSON.stringify(msg.payload);\nmsg.topic = \"octo-data\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1540,
        "wires": [
            [
                "459d586a76964385",
                "e82fa3f4a931dc82"
            ]
        ]
    },
    {
        "id": "459d586a76964385",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "Kafka Producer Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1520,
        "wires": []
    },
    {
        "id": "e82fa3f4a931dc82",
        "type": "kafkajs-producer",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "",
        "client": "89e380a1c824ddad",
        "topic": "",
        "advancedoptions": true,
        "acknowledge": "none",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "x": 420,
        "y": 1560,
        "wires": []
    },
    {
        "id": "345d71275dbccd53",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "User ID",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "a5a56a49b4881d13"
            ]
        ]
    },
    {
        "id": "a5a56a49b4881d13",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Set file path",
        "func": "msg.filename = \"id.txt\"; // archivo en la ra√≠z de Node-RED\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 200,
        "wires": [
            [
                "7ba7ab8886472d6d"
            ]
        ]
    },
    {
        "id": "7ba7ab8886472d6d",
        "type": "file in",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Read ID file",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 200,
        "wires": [
            [
                "0e6982e00cfbd542"
            ]
        ]
    },
    {
        "id": "f5a0c706b44eb215",
        "type": "file",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Write new ID",
        "filename": "id.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 870,
        "y": 220,
        "wires": [
            [
                "53910cda7198a11c"
            ]
        ]
    },
    {
        "id": "0e6982e00cfbd542",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Check ID or generate",
        "func": "// Si hay ID v√°lido en el archivo\nif (msg.payload && msg.payload.trim() !== \"\") {\n    msg.id = msg.payload.trim();\n    return [msg, null]; // Salida 1: ID le√≠do\n} else {\n    const id = global.get(\"generate_id\")(\"uid\");\n    msg.id = id\n    msg.payload = id;\n    return [null, msg]; // Salida 2: nuevo ID\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 200,
        "wires": [
            [
                "53910cda7198a11c"
            ],
            [
                "f5a0c706b44eb215"
            ]
        ]
    },
    {
        "id": "53910cda7198a11c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Global ID",
        "func": "global.set('user_id', msg.payload)\nmsg.payload = global.get('user_id')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 200,
        "wires": [
            [
                "9e08ad373197cb06"
            ]
        ]
    },
    {
        "id": "9e08ad373197cb06",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "USER ID",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 200,
        "wires": []
    },
    {
        "id": "d3645c9ffc7b2ae3",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set filename",
        "func": "msg.filename = msg.payload.trim();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 434,
        "y": 1293.0000610351562,
        "wires": [
            [
                "55d0659e989b1cbb"
            ]
        ]
    },
    {
        "id": "637858ccdecedace",
        "type": "exec",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "command": "find /data/images -type f | shuf -n 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Buscar imagen aleatoria",
        "x": 229,
        "y": 1306.0000610351562,
        "wires": [
            [
                "d3645c9ffc7b2ae3"
            ],
            [],
            []
        ]
    },
    {
        "id": "55d0659e989b1cbb",
        "type": "file in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Leer imagen",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "",
        "x": 634,
        "y": 1293.0000610351562,
        "wires": [
            [
                "fcf3c314f470b7cf"
            ]
        ]
    },
    {
        "id": "3e5ca6621f765aca",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 5",
        "links": [],
        "x": 74,
        "y": 1306.0000610351562,
        "wires": [
            [
                "637858ccdecedace"
            ]
        ]
    },
    {
        "id": "fcf3c314f470b7cf",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "A base64",
        "func": "msg.payload = msg.payload.toString('base64');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 824,
        "y": 1293.0000610351562,
        "wires": [
            [
                "e73ed9386313dce7"
            ]
        ]
    },
    {
        "id": "e73ed9386313dce7",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 6",
        "mode": "return",
        "links": [],
        "x": 959,
        "y": 1293.0000610351562,
        "wires": []
    },
    {
        "id": "93084432de6c3132",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Resultado IA",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 1360,
        "wires": []
    },
    {
        "id": "6e0e6ceea2f2b8de",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "name": "Unificar datos printer + imagen",
        "func": "// Asume msg.payload contiene todos los datos del printer\nlet data = msg.payload;\n\n// Formatear tiempo\nlet secs = parseInt(data.printTime.elapsed.value || 0);\nlet h = Math.floor(secs / 3600);\nlet m = Math.floor((secs % 3600) / 60);\nlet s = secs % 60;\nlet elapsed = `${h}h ${m}m ${s}s`;\n\n// Formatear estado\nlet status = data.status.value.toUpperCase();\nlet color = \"#999\";\nif (status === \"PRINTING\") color = \"#42a5f5\";\nelse if (status === \"PAUSED\") color = \"#ffb74d\";\nelse if (status === \"DONE\") color = \"#81c784\";\n\n// Salida\nmsg.payload = {\n  file: data.file.value,\n  status: status,\n  statusColor: color,\n  elapsed: elapsed,\n  progress: data.progress.value,\n  temps: {\n    room: data.environment.roomTemperature.value.toFixed(1) + \" ¬∞C\",\n    bed: data.temperatures.bed.actual.value.toFixed(1) + \" ¬∞C\",\n    nozzle: data.temperatures.nozzle.actual.value.toFixed(1) + \" ¬∞C\",\n    nozzleTarget: data.temperatures.nozzle.target.value.toFixed(1) + \" ¬∞C\"\n  },\n  image: data.image?.value || \"\"\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1660,
        "wires": [
            [
                "0b12c575a8f788b6"
            ]
        ]
    },
    {
        "id": "0b12c575a8f788b6",
        "type": "ui_template",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "group": "fd718569531f6881",
        "name": "Panel Dashboard Printer",
        "order": 1,
        "width": "12",
        "height": "10",
        "format": "<style> \n\n  .status-info p.archivo {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100%;\n  }\n  \n  body,\n  md-content,\n  .nr-dashboard-theme,\n  .nr-dashboard-cardpanel,\n  .nr-dashboard-template,\n  md-card {\n  background-color: transparent !important;\n  box-shadow: none !important;\n  }\n\n  .card-container {\n    font-family: 'Segoe UI', sans-serif;\n    background-color: #f0f0f0;\n    padding: 20px;\n    border-radius: 12px;\n    color: #90caf9;\n\n    display: flex;\n    gap: 30px;\n  }\n  .headline {\n    color: #1e88e5;\n    border-bottom: 2px solid #555;\n    padding-bottom: 5px;\n    margin-bottom: 15px;\n    font-size: 22px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center; /* ‚úÖ A√±ade esta l√≠nea */\n    background-color: transparent;\n    /* Asegura fondo transparente */\n  }\n\n  /* Barra m√°s larga SOLO para Temperaturas */\n  .temps .headline {\n    width: 140%;                     /* barra m√°s larga (puedes ajustar %) */\n  }\n\n  /* P√°rrafos dentro de .status-info y .temps */\n  .status-info p,\n  .temps p {\n    font-size: 20px;\n    margin: 10px 0;\n    color: #1e88e5;\n    font-weight: normal;\n    background-color: transparent !important;\n  }\n\n  /* Para que strong no tenga fondo */\n  .status-info strong,\n  .temps strong {\n    font-weight: normal;\n    color: #1e88e5;\n    text-transform: uppercase;\n    background-color: transparent !important;\n  }\n\n  .progress-container {\n    width: 100%;\n    background: #ccc;\n    border-radius: 8px;\n    position: relative;\n    height: 30px;\n    margin-top: 5px;\n  }\n\n  .progress-bar {\n    height: 100%;\n    border-radius: 8px;\n    transition: width 0.5s;\n    background: linear-gradient(90deg, #4f83cc, #b39ddb);\n  }\n\n  .progress-text {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    text-align: center;\n    line-height: 30px;\n    font-weight: bold;\n    color: #ffffff;\n    background-color: transparent !important;\n  }\n\n  .temps p.bed {\n    display: block !important;\n  }\n  .status-info p.tiempo {\n    display: block !important;\n  }\n\n  .camera {\n    /* Foto 1/3 del contenedor */\n    flex: 0 0 33.33%; /* fijo un tercio del ancho */\n  }\n\n  .camera img {\n    width: 100%;\n    height: auto;\n    max-height: 400px; /* m√°s alto para que se note grande */\n    border-radius: 10px;\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.5);\n    object-fit: cover;\n    background-color: transparent !important;\n  }\n\n  .camera .no-image {\n    color: #bbb;\n    font-style: italic;\n    background-color: transparent !important;\n  }\n</style>\n\n<div class=\"card-container\" layout=\"row\" layout-align=\"space-between start\">\n  <!-- Estado -->\n  <div flex=\"40\" class=\"status-info\">\n    <div class=\"headline\">Estado</div>\n    <p class=\"archivo\" title=\"{{msg.payload.file}}\">\n      <strong>Archivo:</strong> {{msg.payload.file}}\n    </p>\n    <p><strong>Estado:</strong>\n      <span style=\"color: {{msg.payload.statusColor}};\">\n        {{msg.payload.status}}\n      </span>\n    </p>\n    <p class=\"tiempo\"><strong>Tiempo:</strong><br>{{msg.payload.elapsed}}</p>\n    <p><strong>Progreso:</strong></p>\n    <div class=\"progress-container\">\n      <div class=\"progress-bar\" style=\"width: {{msg.payload.progress}}%;\"></div>\n      <div class=\"progress-text\">{{msg.payload.progress}}%</div>\n    </div>\n  </div>\n\n  <!-- Temperaturas -->\n  <div flex=\"20\" class=\"temps\">\n    <div class=\"headline\">Temperaturas</div>\n    <p><strong>Habitaci√≥n:</strong> {{msg.payload.temps.room}}</p>\n    <p class=\"bed\"><strong>Bed:</strong><br>{{msg.payload.temps.bed}}</p>\n    <p><strong>Nozzle:</strong> {{msg.payload.temps.nozzle}}</p>\n    <p><strong>Target:</strong> {{msg.payload.temps.nozzleTarget}}</p>\n  </div>\n\n  <div flex=\"100\"></div>\n  <!-- C√°mara -->\n  <div class=\"camera\">\n    <div class=\"headline\">C√°mara</div>\n    <img ng-if=\"msg.payload.image\" ng-src=\"data:image/jpeg;base64,{{msg.payload.image}}\">\n    <div ng-if=\"!msg.payload.image\" class=\"no-image\">Sin imagen disponible</div>\n  </div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 510,
        "y": 1660,
        "wires": [
            []
        ]
    },
    {
        "id": "c6871569fb8c002e",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "name": "link-in-dashboard",
        "links": [
            "b951daf915408c23"
        ],
        "x": 75,
        "y": 1660,
        "wires": [
            [
                "6e0e6ceea2f2b8de"
            ]
        ]
    },
    {
        "id": "be45507378d0c67a",
        "type": "mqtt in",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "PRINTING MQTT",
        "topic": "octoPrint/event/PrinterStateChanged",
        "qos": "0",
        "datatype": "auto",
        "broker": "4b50b82dd1e6f2fa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 420,
        "wires": [
            [
                "5575cc990afae85d"
            ]
        ]
    },
    {
        "id": "5575cc990afae85d",
        "type": "json",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Convertir a JSON",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 420,
        "wires": [
            [
                "7a15e65e1588064d",
                "6ff6fddc6c13593b",
                "596c3915c537f8be"
            ]
        ]
    },
    {
        "id": "7a15e65e1588064d",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "¬øEs PRINTING?",
        "property": "payload.state_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRINTING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 420,
        "wires": [
            [
                "c250c05be67c669b",
                "4c6b4984539f8f77"
            ],
            [
                "53b4eab8fa19e5eb",
                "26793a763eb07761"
            ]
        ]
    },
    {
        "id": "c250c05be67c669b",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Reiniciar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "timerStart",
                "pt": "flow",
                "to": "null",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "printing",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "53b4eab8fa19e5eb",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Activar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "timerStart",
                "pt": "flow",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "printing",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "c7dc32fcc6ecffda",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Cada 5 segundos",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "1bbdc14472d2bf17"
            ]
        ]
    },
    {
        "id": "1bbdc14472d2bf17",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "¬øTimer activo?",
        "property": "timerActive",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 580,
        "wires": [
            [
                "437481b663498afe"
            ],
            [
                "f24fa294eb8453f0"
            ]
        ]
    },
    {
        "id": "f24fa294eb8453f0",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Verificar tiempo",
        "func": "var timerStart = flow.get('timerStart');\n\nif (!timerStart) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar startTime = new Date(timerStart);\nif (isNaN(startTime.getTime())) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar currentTime = new Date();\nvar diff = currentTime.getTime() - startTime.getTime(); // ‚Üê aqu√≠ la correcci√≥n\nvar thirtyMinutes = 30 * 60 * 1000;\n\nif (diff < thirtyMinutes) {\n    return msg;\n} else {\n    flow.set('timerActive', false);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 620,
        "wires": [
            [
                "d3fac3306dbfbd2f",
                "99cfacb242f8903c"
            ]
        ]
    },
    {
        "id": "6ff6fddc6c13593b",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "state_id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.state_id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 360,
        "wires": []
    },
    {
        "id": "596c3915c537f8be",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Print_ID",
        "func": "let estadoNuevo = msg.payload.state_string;\nlet datos = flow.get(\"print_id\") || {};\nvar startTime = new Date();\nvar id = flow.get(\"print_id\");\n\nif (estadoNuevo === \"Starting\") {\n    const id = global.get(\"generate_id\")(\"print_id\");\n    flow.set('print_id', id)\n}\n\n\nmsg.payload = { id: id };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "a96e8b7fe5bbc838"
            ]
        ]
    },
    {
        "id": "a96e8b7fe5bbc838",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Debug ID",
        "active": false,
        "tosidebar": true,
        "x": 720,
        "y": 320,
        "wires": []
    },
    {
        "id": "4c6b4984539f8f77",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Reiniciar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Reiniciar temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 360,
        "wires": []
    },
    {
        "id": "26793a763eb07761",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Activar",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Activar temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 480,
        "wires": []
    },
    {
        "id": "e4603c18750ac468",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Imprimiendo",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Obtener dato porque esta imprimiendo\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 540,
        "wires": []
    },
    {
        "id": "437481b663498afe",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Esta imprimiendo?",
        "property": "printing",
        "propertyType": "flow",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 560,
        "wires": [
            [
                "e4603c18750ac468",
                "99cfacb242f8903c"
            ],
            [
                "51c9bd60c2177d88"
            ]
        ]
    },
    {
        "id": "d3fac3306dbfbd2f",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Temporizador activo",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Obtener dato por el temporizador\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 620,
        "wires": []
    },
    {
        "id": "51c9bd60c2177d88",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Fin de los datos",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Fin de la recojida de datos\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 580,
        "wires": []
    },
    {
        "id": "99cfacb242f8903c",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "cf557127a689e17d",
        "name": "Llamar a los datos",
        "mode": "link",
        "links": [
            "b7acc809da4d53bf"
        ],
        "x": 755,
        "y": 600,
        "wires": []
    },
    {
        "id": "0e2b1c9bbf3d7352",
        "type": "http in",
        "z": "128aa5cf7f19b872",
        "g": "21fdc1a59df75649",
        "name": "Endpoint alerta /octo-alarm",
        "url": "/octo-alarm",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2120,
        "wires": [
            [
                "5a36652e24139665",
                "7138754d46d2ce99",
                "4208386dfd5dfad1"
            ]
        ]
    },
    {
        "id": "5a36652e24139665",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "21fdc1a59df75649",
        "name": "Alerta recibida",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"ALLLARMAAA\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 2120,
        "wires": []
    },
    {
        "id": "7138754d46d2ce99",
        "type": "http response",
        "z": "128aa5cf7f19b872",
        "g": "21fdc1a59df75649",
        "name": "Respuesta OK",
        "statusCode": "200",
        "headers": {},
        "x": 440,
        "y": 2160,
        "wires": []
    },
    {
        "id": "4208386dfd5dfad1",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "21fdc1a59df75649",
        "name": "out-octo-alert",
        "mode": "link",
        "links": [
            "235b5a345bf1b63e"
        ],
        "x": 375,
        "y": 2200,
        "wires": []
    },
    {
        "id": "f04a804c1f95a5cd",
        "type": "ui_toast",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "Error en la impresi√≥n",
        "x": 500,
        "y": 1700,
        "wires": []
    },
    {
        "id": "235b5a345bf1b63e",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "name": "link in 4",
        "links": [
            "4208386dfd5dfad1"
        ],
        "x": 75,
        "y": 1700,
        "wires": [
            [
                "a35ae2a915971c6c"
            ]
        ]
    },
    {
        "id": "38f8516fe1e134ea",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "32dd2a56326e82fb",
        "name": "PUT actualizar octoia",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities/octo-alarm/attrs",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 480,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "7ad93da51dfd2132",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "32dd2a56326e82fb",
        "name": "Preparar JSON octo-alarm true",
        "func": "delete msg.url;\nlet result = msg.payload.printSuccessful.value\nmsg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  octoia: { value: result, type: \"Boolean\" }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 2040,
        "wires": [
            [
                "38f8516fe1e134ea"
            ]
        ]
    },
    {
        "id": "3a84a8cc3a806c7e",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "32dd2a56326e82fb",
        "name": "out-orion",
        "links": [
            "b951daf915408c23"
        ],
        "x": 65,
        "y": 2040,
        "wires": [
            [
                "7ad93da51dfd2132"
            ]
        ]
    },
    {
        "id": "fbfd687d777249af",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Listar suscripciones",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/subscriptions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 1900,
        "wires": [
            [
                "b8de993ca808fb44"
            ]
        ]
    },
    {
        "id": "b8de993ca808fb44",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "¬øYa existe subscripci√≥n?",
        "func": "// Revisa si alguna subscripci√≥n ya incluye a SensorAlarma001\nlet yaExiste = false;\n\nfor (let sub of msg.payload) {\n    if (sub.subject && sub.subject.entities) {\n        for (let entidad of sub.subject.entities) {\n            if (entidad.id === \"octo-alarm\") {\n                yaExiste = true;\n                break;\n            }\n        }\n    }\n    if (yaExiste) break;\n}\nmsg.payload = yaExiste;\nreturn msg",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1900,
        "wires": [
            [
                "46a78b7197f2ecf0"
            ]
        ]
    },
    {
        "id": "5e9e974e9a160502",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Ya existe una subscripci√≥n",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Ya existe una subscripci√≥n\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 1880,
        "wires": []
    },
    {
        "id": "eac7a94413e031e7",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Preparar JSON suscripci√≥n",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  description: \"Alerta para la impresi√≥n\",\n  subject: {\n    entities: [{ id: \"octo-alarm\", type: \"Sensor\" }],\n    condition: { \n      attrs: [\"octoia\"],\n      expression: { q: \"octoia==true\" } \n        }\n  },\n  notification: {\n    http: { url: \"http://node-red:1880/octo-alarm\" },\n    attrs: [\"octoia\"]\n  },\n  throttling: 0\n};\nreturn msg;\n\n// throttling mejor a 0. Si esta puesto a 1 podemos no recibir notificaciones\n// por estar dentro del tiempo de espera\n// Podemos quitarlo o ponerlo a 0",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 1920,
        "wires": [
            [
                "cd25718b2b2868e5"
            ]
        ]
    },
    {
        "id": "cd25718b2b2868e5",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "POST crear suscripci√≥n",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/subscriptions",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1470,
        "y": 1920,
        "wires": [
            []
        ]
    },
    {
        "id": "46a78b7197f2ecf0",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Ya esiste?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 1900,
        "wires": [
            [
                "5e9e974e9a160502"
            ],
            [
                "eac7a94413e031e7",
                "ab28c3cc7c795ca5"
            ]
        ]
    },
    {
        "id": "ab28c3cc7c795ca5",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Crear suscripci√≥n",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"Crear suscripci√≥n\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 1960,
        "wires": []
    },
    {
        "id": "ef2bcd43fdefec41",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Preparar entidad JSON",
        "func": "msg.headers = { 'Content-Type': 'application/json' };\nmsg.payload = {\n  id: \"octo-alarm\",\n  type: \"Sensor\",\n  octoia: { value: false, type: \"Boolean\" }\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1860,
        "wires": [
            [
                "8e59531b66222787"
            ]
        ]
    },
    {
        "id": "8e59531b66222787",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "POST crear entidad",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 840,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "e3e09458bc369b14",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "Eliminar/Crear Entidad y Subscribirse",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 1900,
        "wires": [
            [
                "fbfd687d777249af",
                "68c9ed361d01f204"
            ]
        ]
    },
    {
        "id": "68c9ed361d01f204",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "7ff017f7c04d1f3e",
        "name": "DELETE entidad SensorAlarma001",
        "method": "DELETE",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://orion:1026/v2/entities/octo-alarm",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 640,
        "y": 1820,
        "wires": [
            [
                "ef2bcd43fdefec41"
            ]
        ]
    },
    {
        "id": "a35ae2a915971c6c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "8d08067f2ec91c15",
        "name": "Mensaje",
        "func": "msg.payload=\"La IA ha detectado un error\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 1700,
        "wires": [
            [
                "f04a804c1f95a5cd"
            ]
        ]
    },
    {
        "id": "0eebcfa92f87f92d",
        "type": "exec",
        "z": "128aa5cf7f19b872",
        "command": "cat /data/octoprintapi",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "",
        "x": 340,
        "y": 80,
        "wires": [
            [
                "a22c2c400e5dca98"
            ],
            [
                "175ebf717ae0b8c8"
            ],
            []
        ]
    },
    {
        "id": "a22c2c400e5dca98",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "name": "OCTOPRINT_API_KEY",
        "func": "msg.payload = msg.payload.toString().trim(); // <-- elimina \\n y espacios\nlet octoprintapi = msg.payload;\n\nif(octoprintapi===\"\"){\n    msg.payload = \"El fichero 'octoprintapi' esta vacio\"    \n}else{\n    flow.set(\"OCTOPRINT_API_KEY\", octoprintapi);\n    msg.payload = octoprintapi;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 40,
        "wires": [
            [
                "5fc664521d30b833"
            ]
        ]
    },
    {
        "id": "3a9bb47e74b471b7",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "name": "Inicio",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 80,
        "wires": [
            [
                "0eebcfa92f87f92d",
                "5a04c1a555e04855"
            ]
        ]
    },
    {
        "id": "5a04c1a555e04855",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "name": "Code",
        "func": "global.set(\"generateUUIDv4\", function () {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n});\n\nglobal.set(\"generate_id\", function (prefix) {\n    const uuid = global.get(\"generateUUIDv4\")();\n    const timestamp = Date.now();\n    return `${prefix}_${uuid}_${timestamp}`;\n});\n\nflow.set(\"OCTOPRINT_URL\", \"http://octoprint:5000\")\nflow.set('timerActive', null)\nflow.set('timerStart', null)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "175ebf717ae0b8c8",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "name": "Error fichero",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"No se ha podido leer el fichero 'octoprintapi'\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 80,
        "wires": []
    },
    {
        "id": "5fc664521d30b833",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "name": "API KEY",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"API KEY para octo-print: \" & payload",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 40,
        "wires": []
    },
    {
        "id": "89e380a1c824ddad",
        "type": "kafkajs-client",
        "name": "octo-kafka",
        "brokers": "kafka:9092",
        "clientid": "nodered-producer",
        "connectiontimeout": 3000,
        "requesttimeout": 25000,
        "advancedretry": false,
        "maxretrytime": 30000,
        "initialretrytime": 300,
        "factor": 0.2,
        "multiplier": 2,
        "retries": 5,
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "fd718569531f6881",
        "type": "ui_group",
        "name": "Mi impresora:",
        "tab": "42e453982dc44df4",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b50b82dd1e6f2fa",
        "type": "mqtt-broker",
        "name": "Octo-MQTT",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "5",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "42e453982dc44df4",
        "type": "ui_tab",
        "name": "Octo-Data Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]