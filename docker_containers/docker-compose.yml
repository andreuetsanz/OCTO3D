name: octo-data
services:
  octoprint:
    image: octoprint/octoprint
    container_name: octoprint
    restart: unless-stopped
    ports:
      - "5000:5000"
    volumes:
      - ./octoprint_data:/octoprint
    environment:
      - ENABLE_MJPG_STREAMER=false
    networks:
      - octo-red

  node-red:
    container_name: node-red
    build:
      context: .
      dockerfile: Dockerfile.node-red
    user: "0:1000"
    restart: unless-stopped
    environment:
      SERVER_NAME: localhost
    volumes:
      - "./node-red:/data"
    ports:
      - "1881:1880"
    networks:
      - octo-red

  orion:
    image: fiware/orion:2.2.0
    container_name: orion
    hostname: orion
    networks:
      - octo-red
    ports:
      - "1030:1026"
    entrypoint:
      [
        "sh",
        "-c",
        "rm /tmp/contextBroker.pid; /usr/bin/contextBroker -fg -multiservice -dbhost mongo_orion -logLevel DEBUG" # se usa el nombre del servicio no el nombre del contenedor
      ]
    restart: always
    depends_on:
      - "mongo_orion"

  mongo_orion:
    restart: always
    image: mongo:4.4
    command: --nojournal
    container_name: mongo_orion
    networks:
      - octo-red
    ports:
      - "27030:27017"

  mqtt:
    image: eclipse-mosquitto:1.6.13
    container_name: mqtt
    restart: unless-stopped
    ports:
      - "1883:1883"
    networks:
      - octo-red

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - octo-red

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - octo-red
  
  logstash:
    build:
      context: .
      dockerfile: Dockerfile.logstash
    container_name: logstash
    restart: unless-stopped
    volumes:
      - ./logstash:/config-dir
    command: logstash -f /config-dir/logstash.conf
    ports:
      - "9600:9600"     
    depends_on:
      - elasticsearch
    networks:
      - octo-red

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - ./mongodb_data:/data/db
    networks:
      - octo-red

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
    networks:
      - octo-red

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - XPACK_SECURITY_ENABLED=false
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - octo-red

networks:
  octo-red:
    name: octo-red
    driver: bridge

volumes:
  octoprint_data:
  mongodb_data:
  logstash: