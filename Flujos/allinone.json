[
    {
        "id": "128aa5cf7f19b872",
        "type": "tab",
        "label": "Get_Data_From_Octoprint",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "19be8253c61f2ebe",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "IS PRINTING?",
        "style": {
            "stroke": "#0070c0",
            "fill": "#bfdbef",
            "label": true
        },
        "nodes": [
            "624896e6d80eba7f",
            "511702800576d318",
            "a68b7b7e7b1454ba",
            "5924623ef4f72138",
            "d86e2b2c3c4031c4",
            "eaa5eff15df08ee7",
            "f935e2634e082206",
            "18e084e5276edc3c",
            "80de9e65d8e17084",
            "2bd1a27d157d5b1a",
            "013bf85e50710ab9",
            "78435c8aa7bafbfb",
            "be56419d7580c506"
        ],
        "x": 34,
        "y": 399,
        "w": 892,
        "h": 262
    },
    {
        "id": "6554eaf24f3301c5",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "GET OCTOPRINT DATA",
        "style": {
            "stroke": "#92d04f",
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "15149959834d55d4",
            "5ed068ddf703b120",
            "9ce3e248714ecc7c",
            "2f1fb89ca713424a",
            "beca61d4059fbb6c",
            "bf3decc96e99af4a",
            "8ea1f925d1110caf",
            "a976bfeb5c0ec0de",
            "f7943ebf33dd8366",
            "79ecda98e90af27c",
            "9f684c6e363ccd13",
            "1f37cd4514231950",
            "109e563c15388241",
            "0742771261fba357",
            "128e9488f1257725",
            "9a5867a62475db51",
            "6458d3505d52204e",
            "ad5ce31ea07e9d35",
            "1ce1d23cb1b995f8",
            "49556c9a63bab5dd",
            "6a157fe845a720fc",
            "5e7cd0fc9bb4b0bc",
            "8baaa7a44bda0738",
            "b28ca6427025442a",
            "73e6eeb28b5094d2",
            "1973f07ec12899cc",
            "257bee5770153a14",
            "520f0530e3b3aa62",
            "ef89cada522d26af",
            "ee5f0423d88336bf",
            "9a23b6a7fc2c454d",
            "b00339a3a774a085",
            "11b28f3d3fc7c4a3",
            "fb55fff99835f2ac",
            "5de610cd6b6e4270",
            "e8be6c2d807e63d0",
            "b7acc809da4d53bf",
            "b951daf915408c23",
            "d3645c9ffc7b2ae3",
            "637858ccdecedace",
            "55d0659e989b1cbb",
            "3e5ca6621f765aca",
            "fcf3c314f470b7cf",
            "e73ed9386313dce7",
            "93084432de6c3132"
        ],
        "x": 33,
        "y": 679,
        "w": 1653,
        "h": 782
    },
    {
        "id": "266f6d3eca23ba9f",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "Kafka",
        "style": {
            "stroke": "#6f2fa0",
            "fill": "#dbcbe7",
            "label": true
        },
        "nodes": [
            "459d586a76964385",
            "828ab81728f97ea1",
            "9872f623f72c382d",
            "e82fa3f4a931dc82"
        ],
        "x": 34,
        "y": 1499,
        "w": 552,
        "h": 122
    },
    {
        "id": "2a6479e3d61413d4",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "ANDREU",
        "style": {
            "stroke": "#ffdf7f",
            "fill": "#ffdf7f",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "31e8a8619228c446",
            "906c6d6f4f91a1e2"
        ],
        "x": 994,
        "y": 519,
        "w": 472,
        "h": 82
    },
    {
        "id": "5c5a197179018839",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "GERARD",
        "style": {
            "stroke": "#b797cf",
            "fill": "#b797cf",
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "a47d2c3314b0ecb5",
            "91d17a9337f29380"
        ],
        "x": 994,
        "y": 419,
        "w": 472,
        "h": 82
    },
    {
        "id": "a0d0030ba181d9c6",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "USER ID",
        "style": {
            "stroke": "#777777",
            "fill": "#d1d1d1",
            "label": true
        },
        "nodes": [
            "345d71275dbccd53",
            "a5a56a49b4881d13",
            "7ba7ab8886472d6d",
            "f5a0c706b44eb215",
            "0e6982e00cfbd542",
            "53910cda7198a11c",
            "9e08ad373197cb06"
        ],
        "x": 34,
        "y": 279,
        "w": 1292,
        "h": 102
    },
    {
        "id": "b17494c958703951",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "name": "Dashboard",
        "style": {
            "stroke": "#ffff00",
            "fill": "#ffffbf",
            "label": true
        },
        "nodes": [
            "61e2f0cceeb1f6a2",
            "bcb45a0ec81cf66e",
            "6f7de024a90c0f5a",
            "09425fa9e51cf20c",
            "af4e2f65b8c2c15f"
        ],
        "x": 34,
        "y": 1636.5,
        "w": 1038,
        "h": 470.5
    },
    {
        "id": "09425fa9e51cf20c",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "g": "b17494c958703951",
        "name": "VISUAL",
        "style": {
            "fill": "#ff7f7f",
            "label": true,
            "stroke": "#ff3f3f",
            "color": "#000000"
        },
        "nodes": [
            "63831c0178db03a4",
            "b83673a468f59ce0",
            "48c0ef824c2e5648",
            "4f11218d5ca6faa1"
        ],
        "x": 754,
        "y": 1719,
        "w": 292,
        "h": 202
    },
    {
        "id": "af4e2f65b8c2c15f",
        "type": "group",
        "z": "128aa5cf7f19b872",
        "g": "b17494c958703951",
        "name": "DATOS",
        "style": {
            "stroke": "#dbcbe7",
            "fill": "#9363b7",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "332e546f9f9ecccd",
            "ee2772192c10c802"
        ],
        "x": 754,
        "y": 1959,
        "w": 252,
        "h": 122
    },
    {
        "id": "8ea1f925d1110caf",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "GET",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "x": 130,
        "y": 800,
        "wires": [
            [
                "1f37cd4514231950",
                "73e6eeb28b5094d2",
                "520f0530e3b3aa62",
                "ef89cada522d26af",
                "ee5f0423d88336bf",
                "9a23b6a7fc2c454d",
                "b00339a3a774a085"
            ]
        ]
    },
    {
        "id": "a976bfeb5c0ec0de",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=printer",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printer",
                "tot": "str"
            }
        ],
        "x": 780,
        "y": 780,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "f7943ebf33dd8366",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=job",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "job",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 840,
        "wires": [
            [
                "79ecda98e90af27c",
                "6458d3505d52204e"
            ]
        ]
    },
    {
        "id": "79ecda98e90af27c",
        "type": "join",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Unir",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "",
        "joinerType": "str",
        "useparts": true,
        "accumulate": false,
        "timeout": "",
        "count": "9",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "num",
        "reduceFixup": "",
        "x": 1070,
        "y": 900,
        "wires": [
            [
                "128e9488f1257725"
            ]
        ]
    },
    {
        "id": "9f684c6e363ccd13",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Resultado Final",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1560,
        "y": 960,
        "wires": []
    },
    {
        "id": "1f37cd4514231950",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "ID",
        "func": "// Generar timestamp\nlet timestamp = Date.now();\nlet maxletas = 5;\n\n// Funci√≥n para generar 3 letras aleatorias\nfunction generateUUIDv4() {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n}\n\n// Crear el ID\nconst id = global.get(\"generate_id\")(\"opr\");\nmsg.payload = id\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 720,
        "wires": [
            [
                "109e563c15388241"
            ]
        ]
    },
    {
        "id": "109e563c15388241",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=id",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "id",
                "tot": "str"
            }
        ],
        "x": 770,
        "y": 720,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "0742771261fba357",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=files",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "files",
                "tot": "str"
            }
        ],
        "x": 784,
        "y": 898.9999389648438,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "128e9488f1257725",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Formato JSON Schema",
        "func": "const data = msg.payload || {};\nconst printer = data.printer || {};\nconst job = data.job || {};\nconst id = data.id || {};\nconst displayLayerProgress = data.displayLayerProgress || {};\nconst gcode = data.gcode || {};\nconst img = data.img || {};\nconst printSuccessful = data.printSuccessful;\nconst roomTemperature = data.roomTemperature || {};\n\nconst files = data.files?.files || [];\nconst currentFilePath = job.job?.file?.path;\n\nlet matchedFile = files.find(f => f.path === currentFilePath);\nlet estimatedTime = matchedFile?.gcodeAnalysis?.estimatedPrintTime ?? (job.progress?.printTime ?? 0) + (job.progress?.printTimeLeft ?? 0);\n\nmsg.payload = {\n    id: id,\n    user_id: global.get('user_id'),\n    print_id: flow.get('print_id'),\n    type: \"3DPrinter\",\n    timestamp: new Date().toISOString(),\n\n    temperatures: {\n        nozzle: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.tool0?.target ?? null,\n                unitCode: \"CEL\"\n            }\n\n        },\n        bed: {\n            actual: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.actual ?? null,\n                unitCode: \"CEL\"\n            },\n            target: {\n                type: \"Property\",\n                value: printer.temperature?.bed?.target ?? null,\n                unitCode: \"CEL\"\n            }\n        }\n    },\n\n    environment: {\n        roomTemperature: {\n        value: roomTemperature ?? null,\n        unitCode: \"CEL\"\n        }\n    },\n\n    fanSpeed:{\n        type: \"Property\",\n        value: displayLayerProgress.fanSpeed ?? null,\n        unitCode: \"P1\"\n    },\n\n    printTime: {\n        elapsed: {\n            type: \"Property\",\n            value: job.progress?.printTime ?? null,\n            unitCode: \"SEC\"\n        },\n        estimated: {\n            type: \"Property\",\n            value: estimatedTime,\n            unitCode: \"SEC\"\n        }\n    },\n\n    printer: {\n        type: \"Property\",\n        value: gcode.printer ?? null\n    },\n\n    filament: {\n        type: \"Property\",\n        value: {\n            type: gcode.filament ?? null,\n            brand: gcode.filament_brand ?? null,\n            used: gcode.filament_used ?? null,\n        }\n    },\n\n    slicer: {\n        type: \"Property\",\n        value: gcode.slicer ?? null\n    },\n\n    printSuccessful: {\n        type: \"Property\",\n        value: printSuccessful ?? null\n    },\n\n    status: {\n        type: \"Property\",\n        value: job.state ?? null\n    },\n\n    image: {\n        type: \"Property\",\n        value: img ?? null\n    },\n\n    file: {\n        type: \"Property\",\n        value: currentFilePath\n    },\n    progress:{\n        type: \"Property\",\n        value: isNaN(parseInt(displayLayerProgress.print.progress)) ? null : parseInt(displayLayerProgress.print.progress)\n    },\n    layer: {\n        currentLayer: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.current ?? null\n        },\n        totalLayers: {\n            type: \"Property\",\n            value: displayLayerProgress.layer.total ?? null,\n        }\n    }\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 900,
        "wires": [
            [
                "b951daf915408c23",
                "9f684c6e363ccd13"
            ]
        ]
    },
    {
        "id": "9a5867a62475db51",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=DisplayLayerProgress",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "displayLayerProgress",
                "tot": "str"
            }
        ],
        "x": 830,
        "y": 960,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "6458d3505d52204e",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Descargar G-code",
        "func": "const nombreArchivo = msg.payload.job.file.path;\nmsg.filename = nombreArchivo;\nmsg.url = `${flow.get('OCTOPRINT_URL')}/downloads/files/local/${nombreArchivo}`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "ad5ce31ea07e9d35"
            ]
        ]
    },
    {
        "id": "ad5ce31ea07e9d35",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1290,
        "y": 840,
        "wires": [
            [
                "1ce1d23cb1b995f8"
            ]
        ]
    },
    {
        "id": "1ce1d23cb1b995f8",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "49556c9a63bab5dd"
        ],
        "x": 1495,
        "y": 840,
        "wires": []
    },
    {
        "id": "49556c9a63bab5dd",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 1",
        "links": [
            "1ce1d23cb1b995f8"
        ],
        "x": 335,
        "y": 1020,
        "wires": [
            [
                "5e7cd0fc9bb4b0bc"
            ]
        ]
    },
    {
        "id": "6a157fe845a720fc",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=gcode",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "gcode",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1020,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "5e7cd0fc9bb4b0bc",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Parse G-code Info",
        "func": "let gcode = msg.payload;\n\nlet slicer = 'Desconocido';\nlet printer = '';\nlet filament = '';        // Tipo: PLA, PETG, etc.\nlet filamentBrand = '';   // Marca: eSun, Prusament, etc.\nlet filamentUsed = '';    // Usado: 5.23m, 15g, etc.\n\n// Lista de laminadores conocidos con variaciones de nombres\nconst slicers = {\n    'Ultimaker Cura': ['cura', 'ultimaker cura', 'cura_steamengine', 'cura-steamengine'],\n    'PrusaSlicer': ['prusaslicer', 'prusa slicer', 'prusaslicer'],\n    'Bambu Studio': ['bambu studio', 'bambu_studio', 'bambu-studio'],\n    'Creality Print': ['creality print', 'creality_print'],\n    'Slic3r': ['slic3r', 'slic3r pe', 'slic3r_pe'],\n    'IdeaMaker': ['ideamaker', 'idea_maker'],\n    'Simplify3D': ['simplify3d', 'simplify 3d'],\n    'MatterControl': ['mattercontrol', 'matter control'],\n    'ReplicatorG': ['replicatorg', 'replicator g'],\n    'FlashPrint': ['flashprint', 'flash print'],\n    'ZeroSlicer': ['zeroslicer', 'zero slicer'],\n    'Kiri Moto': ['kirimotors', 'kiri motors']\n};\n\n// Funci√≥n para verificar si alguna palabra del laminador aparece en el G-code\nfunction detectSlicer(gcode, slicerNames) {\n    for (let slicerName of slicerNames) {\n        let regex = new RegExp(slicerName, 'i');\n        if (regex.test(gcode)) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// Verificar slicer\nfor (let [name, variations] of Object.entries(slicers)) {\n    if (detectSlicer(gcode, variations)) {\n        slicer = name;\n        break;\n    }\n}\n\n// Detectar impresora con m√∫ltiples patrones comunes\nlet printerRegexes = [\n    /; ?(MACHINE_NAME|printer_model) *= *(.+)/i,\n    /; ?print_compatible_printers *= *(.+)/i,\n    /; ?printer_name *= *(.+)/i,\n    /; ?model *= *(.+)/i\n];\n\nfor (let regex of printerRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        printer = match?.[2]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar tipo de filamento (PLA, PETG, etc.)\nlet filamentTypeRegexes = [\n    /; ?filament_type *= *(.+)/i,\n    /; ?filament_material *= *(.+)/i\n];\n\nfor (let regex of filamentTypeRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filament = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar marca del filamento\nlet filamentBrandRegexes = [\n    /; ?filament_brand *= *(.+)/i,\n    /; ?filament_settings_id *= *(.+)/i\n];\n\n\nfor (let regex of filamentBrandRegexes) {\n    let match = gcode.match(regex);\n    if (match) {\n        filamentBrand = match?.[1]?.trim() || '';\n        break;\n    }\n}\n\n// Detectar cantidad de filamento usado\n\n// 1. Buscar exactamente: \"; filament used [g] = ...\"\nlet usedGramsExact = gcode.match(/; ?filament used \\[g\\] *= *([^\\n]+)/i);\nif (usedGramsExact) {\n    filamentUsed = usedGramsExact[1].trim();\n} else {\n    // 2. Buscar una l√≠nea que contenga \"filament_user\" y tambi√©n una \"g\"\n    let userLineMatch = gcode.match(/^.*filament_user.*g.*$/gim);\n    if (userLineMatch && userLineMatch.length > 0) {\n        // Extraer solo el valor despu√©s del signo \"=\" si lo hay\n        let valueMatch = userLineMatch[0].match(/= *([^\\n]+)/);\n        if (valueMatch) {\n            filamentUsed = valueMatch[1].trim();\n        } else {\n            filamentUsed = userLineMatch[0].trim(); // L√≠nea completa como fallback\n        }\n    } else {\n        // 3. Buscar con los patrones comunes\n        let filamentUsedRegexes = [\n            /; ?filament used(?: *\\[.*\\])? *= *(.+)/i,\n            /; ?filament_used *= *(.+)/i,\n            /; ?filament_consumed *= *(.+)/i\n        ];\n\n        for (let regex of filamentUsedRegexes) {\n            let match = gcode.match(regex);\n            if (match) {\n                filamentUsed = match[1].trim();\n                break;\n            }\n        }\n    }\n}\n\n\n// Resultado\nmsg.payload = {\n    slicer: slicer,\n    printer: printer,\n    filament: filament,\n    filament_brand: filamentBrand,\n    filament_used: filamentUsed\n};\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "6a157fe845a720fc"
            ]
        ]
    },
    {
        "id": "8baaa7a44bda0738",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=img",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "img",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "b28ca6427025442a",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=printSuccessful",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "printSuccessful",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 1140,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "73e6eeb28b5094d2",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Obtener imaguen",
        "links": [
            "3e5ca6621f765aca"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1080,
        "wires": [
            [
                "8baaa7a44bda0738",
                "257bee5770153a14"
            ]
        ]
    },
    {
        "id": "1973f07ec12899cc",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set topic=roomTemperature",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "roomTemperature",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 1200,
        "wires": [
            [
                "79ecda98e90af27c"
            ]
        ]
    },
    {
        "id": "257bee5770153a14",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "IA",
        "links": [
            "15149959834d55d4"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 610,
        "y": 1140,
        "wires": [
            [
                "b28ca6427025442a"
            ]
        ]
    },
    {
        "id": "520f0530e3b3aa62",
        "type": "link call",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "roomTemperature",
        "links": [
            "9ce3e248714ecc7c"
        ],
        "linkType": "static",
        "timeout": "30",
        "x": 410,
        "y": 1200,
        "wires": [
            [
                "1973f07ec12899cc"
            ]
        ]
    },
    {
        "id": "15149959834d55d4",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 2",
        "links": [],
        "x": 75,
        "y": 1360,
        "wires": [
            [
                "beca61d4059fbb6c"
            ]
        ]
    },
    {
        "id": "5ed068ddf703b120",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 2",
        "mode": "return",
        "links": [],
        "x": 265,
        "y": 1360,
        "wires": []
    },
    {
        "id": "9ce3e248714ecc7c",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 3",
        "links": [],
        "x": 75,
        "y": 1420,
        "wires": [
            [
                "bf3decc96e99af4a"
            ]
        ]
    },
    {
        "id": "2f1fb89ca713424a",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 3",
        "mode": "return",
        "links": [],
        "x": 355,
        "y": 1420,
        "wires": []
    },
    {
        "id": "beca61d4059fbb6c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "IA",
        "func": "let ran = Math.random();\nif (ran < 0.80){\n    msg.payload = true\n}else{\n    msg.payload = false\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1360,
        "wires": [
            [
                "5ed068ddf703b120",
                "93084432de6c3132"
            ]
        ]
    },
    {
        "id": "bf3decc96e99af4a",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "roomTemperature",
        "func": "msg.payload = +(Math.random() + 30).toFixed(1);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1420,
        "wires": [
            [
                "2f1fb89ca713424a"
            ]
        ]
    },
    {
        "id": "e4b4800feafd8bdb",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "name": "Servidor Visrtual",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "6493cfbc7612077c"
            ]
        ]
    },
    {
        "id": "6493cfbc7612077c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "name": "Variables de flujo",
        "func": "flow.set(\"OCTOPRINT_URL\", \"http://octoprint:5000\")\nflow.set(\"OCTOPRINT_API_KEY\", \"sHyUL2EZ8Q_Cq8Lpi_B6gkaobZbOqtEb6PRbxxgedpo\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ef89cada522d26af",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Estado OctoPrint",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/printer`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 780,
        "wires": [
            [
                "11b28f3d3fc7c4a3"
            ]
        ]
    },
    {
        "id": "ee5f0423d88336bf",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Job Info",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/job`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 840,
        "wires": [
            [
                "fb55fff99835f2ac"
            ]
        ]
    },
    {
        "id": "9a23b6a7fc2c454d",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Files",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/api/files`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 900,
        "wires": [
            [
                "5de610cd6b6e4270"
            ]
        ]
    },
    {
        "id": "b00339a3a774a085",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "DisplayLayerProgress",
        "func": "msg.url = `${flow.get('OCTOPRINT_URL')}/plugin/DisplayLayerProgress/values`;\nmsg.headers = {\n    \"X-Api-Key\": flow.get('OCTOPRINT_API_KEY')\n};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 960,
        "wires": [
            [
                "e8be6c2d807e63d0"
            ]
        ]
    },
    {
        "id": "11b28f3d3fc7c4a3",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 780,
        "wires": [
            [
                "a976bfeb5c0ec0de"
            ]
        ]
    },
    {
        "id": "fb55fff99835f2ac",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 840,
        "wires": [
            [
                "f7943ebf33dd8366"
            ]
        ]
    },
    {
        "id": "5de610cd6b6e4270",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": " http",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 900,
        "wires": [
            [
                "0742771261fba357"
            ]
        ]
    },
    {
        "id": "e8be6c2d807e63d0",
        "type": "http request",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "http ",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 610,
        "y": 960,
        "wires": [
            [
                "9a5867a62475db51"
            ]
        ]
    },
    {
        "id": "addda7df283377de",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "name": "Variables de flujo",
        "func": "flow.set(\"OCTOPRINT_URL\", \"http://192.168.0.119:5000\")\nflow.set(\"OCTOPRINT_API_KEY\", \"6ZMXBaKRB1Wx-w9DWuyQmprhlApYHDG3QrMaeY3XhWY\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "97b177574bad46e9",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "name": "Servidor Real",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 550,
        "y": 180,
        "wires": [
            [
                "addda7df283377de"
            ]
        ]
    },
    {
        "id": "b7acc809da4d53bf",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 4",
        "links": [
            "18e084e5276edc3c"
        ],
        "x": 125,
        "y": 1140,
        "wires": [
            [
                "1f37cd4514231950",
                "ef89cada522d26af",
                "ee5f0423d88336bf",
                "9a23b6a7fc2c454d",
                "b00339a3a774a085",
                "73e6eeb28b5094d2",
                "520f0530e3b3aa62"
            ]
        ]
    },
    {
        "id": "624896e6d80eba7f",
        "type": "mqtt in",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "PRINTING MQTT",
        "topic": "octoPrint/event/PrinterStateChanged",
        "qos": "0",
        "datatype": "auto",
        "broker": "4b50b82dd1e6f2fa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "511702800576d318"
            ]
        ]
    },
    {
        "id": "511702800576d318",
        "type": "json",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Convertir a JSON",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 370,
        "y": 520,
        "wires": [
            [
                "a68b7b7e7b1454ba",
                "2bd1a27d157d5b1a",
                "78435c8aa7bafbfb"
            ]
        ]
    },
    {
        "id": "a68b7b7e7b1454ba",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "¬øEs PRINTING?",
        "property": "payload.state_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "PRINTING",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 520,
        "wires": [
            [
                "5924623ef4f72138"
            ],
            [
                "d86e2b2c3c4031c4"
            ]
        ]
    },
    {
        "id": "5924623ef4f72138",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Reiniciar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "false",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "d86e2b2c3c4031c4",
        "type": "change",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Activar temporizador",
        "rules": [
            {
                "t": "set",
                "p": "timerActive",
                "pt": "flow",
                "to": "true",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "timerStart",
                "pt": "flow",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 800,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "eaa5eff15df08ee7",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Cada 5 segundos",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 580,
        "wires": [
            [
                "f935e2634e082206",
                "013bf85e50710ab9"
            ]
        ]
    },
    {
        "id": "f935e2634e082206",
        "type": "switch",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "¬øTimer activo?",
        "property": "timerActive",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 600,
        "wires": [
            [
                "18e084e5276edc3c"
            ],
            [
                "80de9e65d8e17084"
            ]
        ]
    },
    {
        "id": "18e084e5276edc3c",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "b7acc809da4d53bf"
        ],
        "x": 655,
        "y": 600,
        "wires": []
    },
    {
        "id": "80de9e65d8e17084",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Verificar tiempo",
        "func": "var timerStart = flow.get('timerStart');\n\nif (!timerStart) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar startTime = new Date(timerStart);\nif (isNaN(startTime.getTime())) {\n    flow.set('timerActive', false);\n    return null;\n}\n\nvar currentTime = new Date();\nvar diff = currentTime.getTime() - startTime.getTime(); // ‚Üê aqu√≠ la correcci√≥n\nvar thirtyMinutes = 30 * 60 * 1000;\n\nif (diff < thirtyMinutes) {\n    return msg;\n} else {\n    flow.set('timerActive', false);\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "18e084e5276edc3c"
            ]
        ]
    },
    {
        "id": "b951daf915408c23",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "out-printer_data",
        "mode": "link",
        "links": [
            "1d4b7f49f21fee4f",
            "828ab81728f97ea1",
            "61e2f0cceeb1f6a2"
        ],
        "x": 1495,
        "y": 900,
        "wires": []
    },
    {
        "id": "2bd1a27d157d5b1a",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "state_id",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload.state_id",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 480,
        "wires": []
    },
    {
        "id": "828ab81728f97ea1",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "lin-printer_data-kafka",
        "links": [
            "b951daf915408c23"
        ],
        "x": 75,
        "y": 1580,
        "wires": [
            [
                "9872f623f72c382d"
            ]
        ]
    },
    {
        "id": "9872f623f72c382d",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "kafka Data",
        "func": "msg.payload = JSON.stringify(msg.payload);\nmsg.topic = \"octo-data\"\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1560,
        "wires": [
            [
                "459d586a76964385",
                "e82fa3f4a931dc82"
            ]
        ]
    },
    {
        "id": "459d586a76964385",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "Kafka Producer Debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 1540,
        "wires": []
    },
    {
        "id": "e82fa3f4a931dc82",
        "type": "kafkajs-producer",
        "z": "128aa5cf7f19b872",
        "g": "266f6d3eca23ba9f",
        "name": "",
        "client": "89e380a1c824ddad",
        "topic": "",
        "advancedoptions": true,
        "acknowledge": "none",
        "partition": "",
        "headeritems": {},
        "key": "",
        "responsetimeout": 30000,
        "transactiontimeout": 60000,
        "metadatamaxage": 300000,
        "allowautotopiccreation": false,
        "x": 420,
        "y": 1580,
        "wires": []
    },
    {
        "id": "31e8a8619228c446",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "2a6479e3d61413d4",
        "name": "Variables de flujo",
        "func": "flow.set(\"OCTOPRINT_URL\", \"http://host.docker.internal:5000\")\nflow.set(\"OCTOPRINT_API_KEY\", \"hsG_K1UppJ-3FToFKbNOMI5HchM3Mbmo6OxqAL1WV6w\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "906c6d6f4f91a1e2",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "2a6479e3d61413d4",
        "name": "Servidor (Andreu)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1120,
        "y": 560,
        "wires": [
            [
                "31e8a8619228c446"
            ]
        ]
    },
    {
        "id": "a47d2c3314b0ecb5",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "5c5a197179018839",
        "name": "Servidor (Gerard)",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "0",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1120,
        "y": 460,
        "wires": [
            [
                "91d17a9337f29380"
            ]
        ]
    },
    {
        "id": "91d17a9337f29380",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "5c5a197179018839",
        "name": "Variables de flujo",
        "func": "flow.set(\"OCTOPRINT_URL\", \"http://host.docker.internal:5000\")\nflow.set(\"OCTOPRINT_API_KEY\", \"hsG_K1UppJ-3FToFKbNOMI5HchM3Mbmo6OxqAL1WV6w\")\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b8f5b21a167faa77",
        "type": "comment",
        "z": "128aa5cf7f19b872",
        "name": "TODO",
        "info": "Orion\nlogstash \n",
        "x": 990,
        "y": 640,
        "wires": []
    },
    {
        "id": "39b5364f8f4fd575",
        "type": "kafkajs-consumer",
        "z": "128aa5cf7f19b872",
        "name": "",
        "client": "89e380a1c824ddad",
        "groupid": "logstash",
        "topic": "octo-data",
        "advancedoptions": false,
        "autocommitinterval": 5000,
        "autocommitthreshold": 100,
        "sessiontimeout": 30000,
        "rebalancetimeout": 60000,
        "heartbeatinterval": 3000,
        "metadatamaxage": 300000,
        "maxbytesperpartition": 1048576,
        "minbytes": 1,
        "maxbytes": 10485760,
        "maxwaittimeinms": 5000,
        "frombeginning": false,
        "clearoffsets": false,
        "allowautotopiccreation": false,
        "x": 700,
        "y": 1580,
        "wires": [
            [
                "6322e1d1ea1711f7"
            ]
        ]
    },
    {
        "id": "6322e1d1ea1711f7",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "name": "debug 5",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "\"RECIBIDO\"",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 1580,
        "wires": []
    },
    {
        "id": "345d71275dbccd53",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "User ID",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "a5a56a49b4881d13"
            ]
        ]
    },
    {
        "id": "a5a56a49b4881d13",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Set file path",
        "func": "msg.filename = \"id.txt\"; // archivo en la ra√≠z de Node-RED\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 320,
        "wires": [
            [
                "7ba7ab8886472d6d"
            ]
        ]
    },
    {
        "id": "7ba7ab8886472d6d",
        "type": "file in",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Read ID file",
        "filename": "filename",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": true,
        "encoding": "none",
        "allProps": false,
        "x": 450,
        "y": 320,
        "wires": [
            [
                "0e6982e00cfbd542"
            ]
        ]
    },
    {
        "id": "f5a0c706b44eb215",
        "type": "file",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Write new ID",
        "filename": "id.txt",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 870,
        "y": 340,
        "wires": [
            [
                "53910cda7198a11c"
            ]
        ]
    },
    {
        "id": "0e6982e00cfbd542",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Check ID or generate",
        "func": "// Si hay ID v√°lido en el archivo\nif (msg.payload && msg.payload.trim() !== \"\") {\n    msg.id = msg.payload.trim();\n    return [msg, null]; // Salida 1: ID le√≠do\n} else {\n    const id = global.get(\"generate_id\")(\"uid\");\n    msg.id = id\n    msg.payload = id;\n    return [null, msg]; // Salida 2: nuevo ID\n}\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 320,
        "wires": [
            [
                "53910cda7198a11c"
            ],
            [
                "f5a0c706b44eb215"
            ]
        ]
    },
    {
        "id": "53910cda7198a11c",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "Global ID",
        "func": "global.set('user_id', msg.payload)\nmsg.payload = global.get('user_id')\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 320,
        "wires": [
            [
                "9e08ad373197cb06"
            ]
        ]
    },
    {
        "id": "9e08ad373197cb06",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "a0d0030ba181d9c6",
        "name": "USER ID",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "013bf85e50710ab9",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 340,
        "y": 560,
        "wires": []
    },
    {
        "id": "78435c8aa7bafbfb",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Print_ID",
        "func": "let estadoNuevo = msg.payload.state_string;\nlet datos = flow.get(\"print_id\") || {};\nvar startTime = new Date();\nvar id = flow.get(\"print_id\");\n\nif (estadoNuevo === \"Starting\") {\n    const id = global.get(\"generate_id\")(\"print_id\");\n    flow.set('print_id', id)\n}\n\n\nmsg.payload = { id: id };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 440,
        "wires": [
            [
                "be56419d7580c506"
            ]
        ]
    },
    {
        "id": "be56419d7580c506",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "19be8253c61f2ebe",
        "name": "Debug ID",
        "active": false,
        "tosidebar": true,
        "x": 720,
        "y": 440,
        "wires": []
    },
    {
        "id": "d3645c9ffc7b2ae3",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Set filename",
        "func": "msg.filename = msg.payload.trim();\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 434,
        "y": 1293.0000610351562,
        "wires": [
            [
                "55d0659e989b1cbb"
            ]
        ]
    },
    {
        "id": "637858ccdecedace",
        "type": "exec",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "command": "find /data/images -type f | shuf -n 1",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Buscar imagen aleatoria",
        "x": 229,
        "y": 1306.0000610351562,
        "wires": [
            [
                "d3645c9ffc7b2ae3"
            ],
            [],
            []
        ]
    },
    {
        "id": "55d0659e989b1cbb",
        "type": "file in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "Leer imagen",
        "filename": "",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "",
        "x": 634,
        "y": 1293.0000610351562,
        "wires": [
            [
                "fcf3c314f470b7cf"
            ]
        ]
    },
    {
        "id": "3e5ca6621f765aca",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link in 5",
        "links": [],
        "x": 74,
        "y": 1306.0000610351562,
        "wires": [
            [
                "637858ccdecedace"
            ]
        ]
    },
    {
        "id": "fcf3c314f470b7cf",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "A base64",
        "func": "msg.payload = msg.payload.toString('base64');\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 824,
        "y": 1293.0000610351562,
        "wires": [
            [
                "e73ed9386313dce7"
            ]
        ]
    },
    {
        "id": "e73ed9386313dce7",
        "type": "link out",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "link out 6",
        "mode": "return",
        "links": [],
        "x": 959,
        "y": 1293.0000610351562,
        "wires": []
    },
    {
        "id": "8932c90f84a88520",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "name": "Code",
        "func": "global.set(\"generateUUIDv4\", function () {\n    return 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n        var r = Math.random() * 16 | 0,\n            v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n    });\n});\n\nglobal.set(\"generate_id\", function (prefix) {\n    const uuid = global.get(\"generateUUIDv4\")();\n    const timestamp = Date.now();\n    return `${prefix}_${uuid}_${timestamp}`;\n});\nflow.set('timerActive', null)\nflow.set('timerStart', null)\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ab48e83c8818f67a",
        "type": "inject",
        "z": "128aa5cf7f19b872",
        "name": "Global Code",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 970,
        "y": 180,
        "wires": [
            [
                "8932c90f84a88520"
            ]
        ]
    },
    {
        "id": "61e2f0cceeb1f6a2",
        "type": "link in",
        "z": "128aa5cf7f19b872",
        "g": "b17494c958703951",
        "name": "lin-printer_data-kafka",
        "links": [
            "b951daf915408c23"
        ],
        "x": 75,
        "y": 1680,
        "wires": [
            [
                "bcb45a0ec81cf66e",
                "6f7de024a90c0f5a"
            ]
        ]
    },
    {
        "id": "bcb45a0ec81cf66e",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "b17494c958703951",
        "name": "Procesar datos",
        "func": "let data = msg.payload;\n\n// Convertir tiempo a formato H:M:S\nlet totalSeconds = parseInt(data.printTime.elapsed.value);\nlet hours = Math.floor(totalSeconds / 3600);\nlet minutes = Math.floor((totalSeconds % 3600) / 60);\nlet seconds = totalSeconds % 60;\n\nlet formattedTime = \n    (hours > 0 ? hours + \" h \" : \"\") +\n    (minutes > 0 ? minutes + \" min \" : \"\") +\n    seconds + \" s\";\n\n// Convertir status a may√∫sculas\nlet status = data.status.value.toUpperCase();\n\n// Colores seg√∫n estado\nlet statusColor = \"#9e9e9e\"; // Gris por defecto\nif (status === \"PRINTING\") statusColor = \"#2196f3\";\nelse if (status === \"PAUSED\") statusColor = \"#ff9800\";\nelse if (status === \"DONE\") statusColor = \"#4caf50\";\n\nmsg.payload = {\n    file: data.file.value,\n    status: status,\n    statusColor: statusColor,\n    elapsed: formattedTime,\n    progress: data.progress.value\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2020,
        "wires": [
            [
                "332e546f9f9ecccd"
            ]
        ]
    },
    {
        "id": "6f7de024a90c0f5a",
        "type": "function",
        "z": "128aa5cf7f19b872",
        "g": "b17494c958703951",
        "name": "Extraer Temperaturas Multisalida",
        "func": "let data = msg.payload;\n\nreturn [\n    { payload: data.environment.roomTemperature.value },  // Habitaci√≥n\n    { payload: data.temperatures.bed.actual.value },       // Bed actual\n    { payload: data.temperatures.nozzle.actual.value },    // Nozzle actual\n    { payload: data.temperatures.nozzle.target.value },    // Nozzle target\n    {                                                      // Texto para template\n        payload: {\n            roomTempStr: data.environment.roomTemperature.value.toFixed(1) + \" ¬∞C\",\n            bedActualStr: data.temperatures.bed.actual.value.toFixed(1) + \" ¬∞C\",\n            nozzleActualStr: data.temperatures.nozzle.actual.value.toFixed(1) + \" ¬∞C\",\n            nozzleTargetStr: data.temperatures.nozzle.target.value.toFixed(1) + \" ¬∞C\"\n        }\n    }\n];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1700,
        "wires": [
            [
                "63831c0178db03a4"
            ],
            [
                "b83673a468f59ce0"
            ],
            [
                "48c0ef824c2e5648"
            ],
            [
                "4f11218d5ca6faa1"
            ],
            [
                "ee2772192c10c802"
            ]
        ]
    },
    {
        "id": "63831c0178db03a4",
        "type": "ui_gauge",
        "z": "128aa5cf7f19b872",
        "g": "09425fa9e51cf20c",
        "name": "Temperatura Habitaci√≥n",
        "group": "fd718569531f6881",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "HABITACI√ìN",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": 50,
        "colors": [
            "#b39ddb",
            "#4f83cc",
            "#3f51b5"
        ],
        "seg1": 15,
        "seg2": 30,
        "diff": false,
        "className": "",
        "x": 910,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b83673a468f59ce0",
        "type": "ui_gauge",
        "z": "128aa5cf7f19b872",
        "g": "09425fa9e51cf20c",
        "name": "Temperatura Bed Actual",
        "group": "fd718569531f6881",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "BED ACTUAL",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": 120,
        "colors": [
            "#b39ddb",
            "#4f83cc",
            "#3f51b5"
        ],
        "seg1": 30,
        "seg2": 90,
        "x": 910,
        "y": 1800,
        "wires": []
    },
    {
        "id": "48c0ef824c2e5648",
        "type": "ui_gauge",
        "z": "128aa5cf7f19b872",
        "g": "09425fa9e51cf20c",
        "name": "Temperatura Nozzle Actual",
        "group": "fd718569531f6881",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "NOZZLE ACTUAL",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": 250,
        "colors": [
            "#b39ddb",
            "#4f83cc",
            "#3f51b5"
        ],
        "seg1": 50,
        "seg2": 150,
        "x": 900,
        "y": 1840,
        "wires": []
    },
    {
        "id": "4f11218d5ca6faa1",
        "type": "ui_gauge",
        "z": "128aa5cf7f19b872",
        "g": "09425fa9e51cf20c",
        "name": "Temperatura Nozzle Target",
        "group": "fd718569531f6881",
        "order": 4,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "NOZZLE TARGET",
        "label": "¬∞C",
        "format": "{{value}}",
        "min": 0,
        "max": 250,
        "colors": [
            "#b39ddb",
            "#4f83cc",
            "#3f51b5"
        ],
        "seg1": 50,
        "seg2": 150,
        "x": 900,
        "y": 1880,
        "wires": []
    },
    {
        "id": "332e546f9f9ecccd",
        "type": "ui_template",
        "z": "128aa5cf7f19b872",
        "g": "af4e2f65b8c2c15f",
        "group": "1d9fd7301c7f9d4c",
        "name": "Dashboard STATUS",
        "order": 0,
        "width": 0,
        "height": 0,
        "format": "<div style=\"background-color: #f0f0f0; font-family: 'Segoe UI', sans-serif; padding: 40px; border-radius: 10px;\">\n  <h3 style=\"color: #333; border-bottom: 2px solid #ccc; padding-bottom: 5px; margin-bottom: 15px;\">STATUS</h3>\n\n  <div style=\"margin-bottom: 12px;\"><strong>Archivo:</strong><br>{{msg.payload.file}}</div>\n  \n  <div style=\"margin-bottom: 12px;\">\n    <strong>Estado:</strong><br>\n    <span style=\"color: {{msg.payload.statusColor}}; font-weight: bold;\">\n      {{msg.payload.status}}\n    </span>\n  </div>\n  \n  <div style=\"margin-bottom: 12px;\"><strong>Tiempo transcurrido:</strong><br>{{msg.payload.elapsed}}</div>\n\n  <div style=\"margin-bottom: 6px;\"><strong>Progreso:</strong></div>\n  <div style=\"width: 100%; background: #d0d0d0; border-radius: 8px; position: relative; height: 25px;\">\n    <div style=\"width: {{msg.payload.progress}}%; background: linear-gradient(90deg, #4f83cc, #b39ddb); height: 100%; border-radius: 8px; transition: width 0.5s;\"></div>\n    <div style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; text-align: center; line-height: 25px; font-weight: bold; color: #000;\">\n      {{msg.payload.progress}}%\n    </div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 2040,
        "wires": [
            []
        ]
    },
    {
        "id": "ee2772192c10c802",
        "type": "ui_template",
        "z": "128aa5cf7f19b872",
        "g": "af4e2f65b8c2c15f",
        "group": "1d9fd7301c7f9d4c",
        "name": "Texto Temperaturas",
        "order": 5,
        "width": 6,
        "height": 4,
        "format": "<style>\n  .temp-container {\n    background-color: #f0f0f0;\n    font-family: 'Segoe UI', sans-serif;\n    padding: 15px;\n    border-radius: 10px;\n    max-width: 320px;\n    color: #4f83cc;\n  }\n  .temp-container h3 {\n    color: #7e57c2;\n    border-bottom: 2px solid #b39ddb;\n    padding-bottom: 5px;\n    margin-bottom: 15px;\n  }\n  .temp-text div {\n    margin-bottom: 12px;\n    font-weight: 600;\n  }\n</style>\n\n<div class=\"temp-container\">\n  <h3>TEMPERATURAS</h3>\n  <div class=\"temp-text\"><strong>Habitaci√≥n:</strong><br>{{msg.payload.roomTempStr}}</div>\n  <div class=\"temp-text\"><strong>Bed Actual:</strong><br>{{msg.payload.bedActualStr}}</div>\n  <div class=\"temp-text\"><strong>Nozzle Actual:</strong><br>{{msg.payload.nozzleActualStr}}</div>\n  <div class=\"temp-text\"><strong>Nozzle Target:</strong><br>{{msg.payload.nozzleTargetStr}}</div>\n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 870,
        "y": 2000,
        "wires": [
            []
        ]
    },
    {
        "id": "93084432de6c3132",
        "type": "debug",
        "z": "128aa5cf7f19b872",
        "g": "6554eaf24f3301c5",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 1360,
        "wires": []
    },
    {
        "id": "4b50b82dd1e6f2fa",
        "type": "mqtt-broker",
        "name": "Octo-MQTT",
        "broker": "mqtt",
        "port": "1883",
        "clientid": "nodered",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "5",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "89e380a1c824ddad",
        "type": "kafkajs-client",
        "name": "octo-kafka",
        "brokers": "kafka:9092",
        "clientid": "nodered-producer",
        "connectiontimeout": 3000,
        "requesttimeout": 25000,
        "advancedretry": false,
        "maxretrytime": 30000,
        "initialretrytime": 300,
        "factor": 0.2,
        "multiplier": 2,
        "retries": 5,
        "auth": "none",
        "tlsselfsign": false,
        "tlscacert": "",
        "tlsclientcert": "",
        "tlsprivatekey": "",
        "tlspassphrase": "",
        "saslssl": true,
        "saslmechanism": "plain",
        "loglevel": "error"
    },
    {
        "id": "fd718569531f6881",
        "type": "ui_group",
        "name": "Visual",
        "tab": "42e453982dc44df4",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1d9fd7301c7f9d4c",
        "type": "ui_group",
        "name": "Datos",
        "tab": "ea2d7e905fbc6f88",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "42e453982dc44df4",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "ea2d7e905fbc6f88",
        "type": "ui_tab",
        "name": "Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]